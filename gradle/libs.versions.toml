[versions]
kotlin = "1.9.0"
activity-compose = "1.3.1"
app-compat = "1.1.0"
android-paging3 = "3.2.1"
cli-kt = "3.5.0"
coroutines = "1.7.3"
compose-compiler = "1.5.0"
compose-ui = "1.3.2"
compose-material = "1.3.1"
cryptobox4j = "1.4.0"
cryptobox-android = "1.1.5"
android-security = "1.1.0-alpha06"
ktor = "2.3.7"
okio = "3.6.0"
ok-http = "4.11.0"
mockative = "1.4.1"
android-work = "2.8.1"
android-test-runner = "1.5.0"
android-test-rules = "1.5.0"
android-test-core = "1.4.0"
androidx-arch = "2.2.0"
androidx-test-orchestrator = "1.4.2"
androidx-sqlite = "2.4.0"
benasher-uuid = "0.8.0"
ktx-datetime = { strictly = "0.4.1" }
ktx-serialization = "1.5.1"
ktx-atomicfu = "0.20.0"
ktx-reactive = "1.7.3"
kover = "0.7.1"
multiplatform-settings = "1.1.1"
# if you update sqlDelight check if https://github.com/cashapp/sqldelight/issues/4154 is fixed
# and delete the work around in the dev.mk file
sqldelight = "2.0.1"
sqlcipher-android = "4.5.5"
pbandk = "0.14.2"
turbine = "1.0.0"
avs = "9.6.9"
jna = "5.14.0"
core-crypto = "1.0.0-rc.40"
core-crypto-multiplatform = "0.6.0-rc.3-multiplatform-pre1"
completeKotlin = "1.1.0"
desugar-jdk = "2.0.4"
kermit = "2.0.1"
detekt = "1.19.0"
agp = "8.1.2"
dokka = "1.8.20"
carthage = "0.0.1"
libsodiumBindings = "0.8.6"
protobufCodegen = "0.9.4"
annotation = "1.7.0"
mordant = "2.0.0-beta13"
apache-tika = "2.8.0"
mockk = "1.13.5"
faker = "1.15.0"
robolectric = "4.9"
stately = "2.0.6"
micrometer = "1.11.3"
bouncy-castle = "1.70"
konsist = "0.13.0"
postgres = "1.0.2.RELEASE"
r2dbc = "1.0.0.RELEASE"

[plugins]
# Home-made convention plugins
kalium-library = { id = "kalium.library" }
android-library = { id = "com.android.library", version.ref = "agp" }
android-application = { id = "com.android.application", version.ref = "agp" }
completeKotlin = { id = "com.louiscad.complete-kotlin", version.ref = "completeKotlin" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
ksp = { id = "com.google.devtools.ksp", version = "1.9.0-1.0.12" }
carthage = { id = "com.wire.carthage-gradle-plugin", version.ref = "carthage" }
sqldelight = { id = "app.cash.sqldelight", version.ref = "sqldelight" }
protobuf = { id = "com.google.protobuf", version.ref = "protobufCodegen" }

[bundles]
android = ["appCompat", "activityCompose", "work", "composeMaterial", "coroutinesAndroid", "ktor", "ktor-okHttp"]
detekt-test = ["detekt-cli", "detekt-test"]
detekt-core = ["detekt-api"]

[libraries]
# Kotlin Gradle Plugin
kotlin-plugin = { group = "org.jetbrains.kotlin", name = "kotlin-gradle-plugin", version.ref = "kotlin" }

kotlin-nativeUtils = { module = "org.jetbrains.kotlin:kotlin-native-utils", version.ref = "kotlin" }
ktxSerialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "ktx-serialization" }
ktxDateTime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "ktx-datetime" }
ktx-atomicfu = { module = "org.jetbrains.kotlinx:atomicfu", version.ref = "ktx-atomicfu" }
ktxReactive = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactive", version.ref = "ktx-reactive" }

# android dependencies
appCompat = { module = "androidx.appcompat:appcompat", version.ref = "app-compat" }
activityCompose = { module = "androidx.activity:activity-compose", version.ref = "activity-compose" }
work = { module = "androidx.work:work-runtime-ktx", version.ref = "android-work" }
composeMaterial = { module = "androidx.compose.material:material", version.ref = "compose-material" }
composeTooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose-ui" }
coroutinesAndroid = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }
ktor = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
paging3 = { module = "androidx.paging:paging-runtime", version.ref = "android-paging3" }
desugarJdkLibs = { module = "com.android.tools:desugar_jdk_libs", version.ref = "desugar-jdk" }
annotation = { module = "androidx.annotation:annotation", version.ref = "annotation" }

# kmp Settings (shared pref)
settings-kmp = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatform-settings" }
settings-kmpTest = { module = "com.russhwolf:multiplatform-settings-test", version.ref = "multiplatform-settings" }

# android testing
androidtest-runner = { module = "androidx.test:runner", version.ref = "android-test-runner" }
androidtest-rules = { module = "androidx.test:rules", version.ref = "android-test-rules" }
androidtest-core = { module = "androidx.test:core", version.ref = "android-test-core" }
androidtest-arch = { module = "androidx.arch.core:core-testing", version.ref = "androidx-arch" }
androidtest-orchestrator = { module = "androidx.test:orchestrator", version.ref = "androidx-test-orchestrator" }
core-ktx = { module = "androidx.test:core-ktx", version.ref = "android-test-runner" }
robolectric = { module = "org.robolectric:robolectric", version.ref = "robolectric" }

# coroutines
coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }

# cryptobox and crypto dependencies
cryptoboxAndroid = { module = "com.wire:cryptobox-android", version.ref = "cryptobox-android" }
cryptobox4j = { module = "com.wire:cryptobox4j", version.ref = "cryptobox4j" }
androidCrypto = { module = "androidx.security:security-crypto-ktx", version.ref = "android-security" }
coreCrypto = { module = "com.wire:core-crypto", version.ref = "core-crypto-multiplatform" }
coreCryptoJvm = { module = "com.wire:core-crypto-jvm", version.ref = "core-crypto" }
coreCryptoAndroid = { module = "com.wire:core-crypto-android", version.ref = "core-crypto" }
libsodiumBindingsMP = { module = "com.ionspin.kotlin:multiplatform-crypto-libsodium-bindings", version.ref = "libsodiumBindings" }

# cli
cliKt = { module = "com.github.ajalt.clikt:clikt", version.ref = "cli-kt" }
okhttp-loggingInterceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "ok-http" }
mordant = { module = "com.github.ajalt.mordant:mordant", version.ref = "mordant" }

# ktor
ktor-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-json = { module = "io.ktor:ktor-client-json", version.ref = "ktor" }
ktor-serialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-authClient = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-contentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-webSocket = { module = "io.ktor:ktor-client-websockets", version.ref = "ktor" }
ktor-utils = { module = "io.ktor:ktor-utils", version.ref = "ktor" }
ktor-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }
ktor-okHttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-iosHttp = { module = "io.ktor:ktor-client-ios", version.ref = "ktor" }
ktor-encoding = { module = "io.ktor:ktor-client-encoding", version.ref = "ktor" }
ktor-server = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-serverNetty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }

# okio
okio-core = { module = "com.squareup.okio:okio", version.ref = "okio" }
okio-test = { module = "com.squareup.okio:okio-fakefilesystem", version.ref = "okio" }

# sql dependencies
sqlite-androidx = { module = "androidx.sqlite:sqlite", version.ref = "androidx-sqlite" }
sql-android-cipher = { module = "net.zetetic:sqlcipher-android", version.ref = "sqlcipher-android" }
sqldelight-runtime = { module = "app.cash.sqldelight:runtime", version.ref = "sqldelight" }
sqldelight-coroutinesExtension = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqldelight" }
sqldelight-androidDriver = { module = "app.cash.sqldelight:android-driver", version.ref = "sqldelight" }
sqldelight-androidxPaging = { module = "app.cash.sqldelight:androidx-paging3-extensions", version.ref = "sqldelight" }
sqldelight-nativeDriver = { module = "app.cash.sqldelight:native-driver", version.ref = "sqldelight" }
sqldelight-jvmDriver = { module = "app.cash.sqldelight:sqlite-driver", version.ref = "sqldelight" }
sqldelight-jsDriver = { module = "app.cash.sqldelight:web-worker-driver", version.ref = "sqldelight" }
sqldelight-primitiveAdapters = { module = "app.cash.sqldelight:primitive-adapters", version.ref = "sqldelight" }
sqldelight-dialect = { module = "app.cash.sqldelight:sqlite-3-33-dialect", version.ref = "sqldelight" }
sqldelight-postgres = { module = "app.cash.sqldelight:postgresql-dialect", version.ref = "sqldelight" }
sqldelight-r2dbc = { module = "app.cash.sqldelight:r2dbc-driver", version.ref = "sqldelight" }
sqldelight-async = { module = "app.cash.sqldelight:async-extensions", version.ref = "sqldelight" }
r2dbc-postgres = { module = "org.postgresql:r2dbc-postgresql", version.ref = "postgres" }
r2dbc-spi = { module = "io.r2dbc:r2dbc-spi", version.ref = "r2dbc" }

# mocks and testing
mockative-runtime = { module = "io.mockative:mockative", version.ref = "mockative" }
mockative-processor = { module = "io.mockative:mockative-processor", version.ref = "mockative" }
turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
konsist = { module = "com.lemonappdev:konsist", version.ref = "konsist" }

# detekt
detekt-cli = { module = "io.gitlab.arturbosch.detekt:detekt-cli", version.ref = "detekt" }
detekt-api = { module = "io.gitlab.arturbosch.detekt:detekt-api", version.ref = "detekt" }
detekt-test = { module = "io.gitlab.arturbosch.detekt:detekt-test", version.ref = "detekt" }

# misc
pbandk-runtime-iosX64 = { module = "pro.streem.pbandk:pbandk-runtime-iosx64", version.ref = "pbandk" }
pbandk-runtime-iosArm64 = { module = "pro.streem.pbandk:pbandk-runtime-iosarm64", version.ref = "pbandk" }
pbandk-runtime-iosSimulatorArm64 = { module = "pro.streem.pbandk:pbandk-runtime-iossimulatorarm64", version.ref = "pbandk" }
pbandk-runtime-macX64 = { module = "pro.streem.pbandk:pbandk-runtime-macosx64", version.ref = "pbandk" }
pbandk-runtime-macArm64 = { module = "pro.streem.pbandk:pbandk-runtime-macosarm64", version.ref = "pbandk" }
pbandk-runtime-common = { module = "pro.streem.pbandk:pbandk-runtime", version.ref = "pbandk" }
benAsherUUID = { module = "com.benasher44:uuid", version.ref = "benasher-uuid" }
apacheTika = { module = "org.apache.tika:tika-core", version.ref = "apache-tika" }
faker = { module = "io.github.serpro69:kotlin-faker", version.ref = "faker" }
concurrentCollections = { module = "co.touchlab:stately-concurrent-collections", version.ref = "stately" }
statelyCommons = { module = "co.touchlab:stately-common", version.ref = "stately" }

# avs
avs = { module = "com.wire:avs", version.ref = "avs" }
jna = { module = "net.java.dev.jna:jna", version.ref = "jna" }

# logging
kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }
micrometer = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometer" }

# bouncy castle
bouncy-castle = { module = "org.bouncycastle:bcprov-jdk15on", version.ref = "bouncy-castle" }
