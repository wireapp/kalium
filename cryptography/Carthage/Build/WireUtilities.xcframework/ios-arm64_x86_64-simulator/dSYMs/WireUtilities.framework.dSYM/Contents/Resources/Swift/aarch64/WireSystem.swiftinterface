// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name WireSystem
import Foundation
import Swift
@_exported import WireSystem
import os.log
import os
@objc @_hasMissingDesignatedInitializers @objcMembers public class ZMSLogEntry : ObjectiveC.NSObject {
  @objc final public let text: Swift.String
  @objc final public let timestamp: Foundation.Date
  @objc deinit
  @objc override dynamic public init()
}
@objc public class ZMSLog : ObjectiveC.NSObject {
  public typealias LogHook = (WireSystem.ZMLogLevel_t, Swift.String?, Swift.String) -> (Swift.Void)
  public typealias LogEntryHook = (WireSystem.ZMLogLevel_t, Swift.String?, WireSystem.ZMSLogEntry, Swift.Bool) -> (Swift.Void)
  @objc public init(tag: Swift.String)
  @objc public static func sync()
  @objc deinit
  @objc override dynamic public init()
}
extension ZMSLog {
  public func safePublic(_ message: @autoclosure () -> WireSystem.SanitizedString, level: WireSystem.ZMLogLevel_t = .info, file: Swift.String = #file, line: Swift.UInt = #line)
  public func error(_ message: @autoclosure () -> Swift.String, file: Swift.String = #file, line: Swift.UInt = #line)
  public func warn(_ message: @autoclosure () -> Swift.String, file: Swift.String = #file, line: Swift.UInt = #line)
  public func info(_ message: @autoclosure () -> Swift.String, file: Swift.String = #file, line: Swift.UInt = #line)
  public func debug(_ message: @autoclosure () -> Swift.String, file: Swift.String = #file, line: Swift.UInt = #line)
}
extension ZMSLog {
  public func ifWarn(_ closure: () -> Swift.Void)
  public func ifInfo(_ closure: () -> Swift.Void)
  public func ifDebug(_ closure: () -> Swift.Void)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(ZMSLogLogHookToken) final public class LogHookToken : ObjectiveC.NSObject {
  @objc deinit
}
extension ZMSLog {
  @objc public static func addEntryHook(logHook: @escaping WireSystem.ZMSLog.LogEntryHook) -> WireSystem.LogHookToken
  @objc public static func nonLockingAddEntryHook(logHook: @escaping WireSystem.ZMSLog.LogEntryHook) -> WireSystem.LogHookToken
  @objc public static func removeLogHook(token: WireSystem.LogHookToken)
  @objc public static func removeAllLogHooks()
}
extension ZMSLog {
  @objc public static func logWithLevel(_ level: WireSystem.ZMLogLevel_t, message: @autoclosure () -> Swift.String, tag: Swift.String?, file: Swift.String = #file, line: Swift.UInt = #line)
}
extension ZMSLog {
  @objc public static var previousLog: Foundation.Data? {
    @objc get
  }
  @objc public static var currentLog: Foundation.Data? {
    @objc get
  }
  @objc public static let previousLogPath: Foundation.URL?
  @objc public static let currentLogPath: Foundation.URL?
  @objc public static func clearLogs()
  @objc public static func switchCurrentLogToPrevious()
  public static var pathsForExistingLogs: [Foundation.URL] {
    get
  }
}
public class Cache<Key, Value> where Key : Swift.Hashable {
  public init(maxCost: Swift.Int, maxElementsCount: Swift.Int)
  @discardableResult
  public func set(value: Value, for key: Key, cost: Swift.Int) -> Swift.Bool
  public func value(for key: Key) -> Value?
  public func purge()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MemoryReferenceDebugger : ObjectiveC.NSObject {
  public var references: [WireSystem.ReferenceAllocation]
  public static func register(_ object: Swift.AnyObject?, line: Swift.UInt = #line, file: Swift.StaticString = #file)
  @objc public static func register(_ object: ObjectiveC.NSObject?, line: Swift.UInt, file: Swift.UnsafePointer<Swift.CChar>)
  @objc public static func reset()
  @objc public static var aliveObjects: [Swift.AnyObject] {
    @objc get
  }
  @objc public static var aliveObjectsDescription: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
public struct ReferenceAllocation : Swift.CustomStringConvertible {
  weak public var object: Swift.AnyObject?
  public let pointerAddress: Swift.String
  public let file: Swift.String
  public let line: Swift.UInt
  public var isValid: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public struct CircularArray<Element> {
  @discardableResult
  public mutating func add(_ element: Element) -> Element?
  public var content: [Element] {
    get
  }
  public mutating func clear()
  public init(size: Swift.Int, initialValue: [Element] = [])
}
public struct SanitizedString : Swift.Equatable {
  public static func == (a: WireSystem.SanitizedString, b: WireSystem.SanitizedString) -> Swift.Bool
}
extension SanitizedString : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension SanitizedString : Swift.ExpressibleByStringInterpolation {
  public init(stringInterpolation: WireSystem.SanitizedString)
  public typealias StringInterpolation = WireSystem.SanitizedString
}
extension SanitizedString : Swift.StringInterpolationProtocol {
  public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
  public mutating func appendLiteral(_ literal: WireSystem.SanitizedString.StringLiteralType)
  public mutating func appendInterpolation<T>(_ x: T?) where T : WireSystem.SafeForLoggingStringConvertible
  public static func + <T>(lhs: WireSystem.SanitizedString, rhs: T) -> WireSystem.SanitizedString where T : WireSystem.SafeForLoggingStringConvertible
}
extension SanitizedString : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SanitizedString : WireSystem.SafeForLoggingStringConvertible {
  public var safeForLoggingDescription: Swift.String {
    get
  }
}
extension Optional : WireSystem.SafeForLoggingStringConvertible where Wrapped : WireSystem.SafeForLoggingStringConvertible {
  public var safeForLoggingDescription: Swift.String {
    get
  }
}
public protocol SafeForLoggingStringConvertible {
  var safeForLoggingDescription: Swift.String { get }
}
public struct SafeValueForLogging<T> : WireSystem.SafeForLoggingStringConvertible where T : Swift.CustomStringConvertible {
  public let value: T
  public init(_ value: T)
  public var safeForLoggingDescription: Swift.String {
    get
  }
}
extension Array : WireSystem.SafeForLoggingStringConvertible where Element : WireSystem.SafeForLoggingStringConvertible {
  public var safeForLoggingDescription: Swift.String {
    get
  }
}
extension Dictionary : WireSystem.SafeForLoggingStringConvertible where Key : WireSystem.SafeForLoggingStringConvertible, Value : WireSystem.SafeForLoggingStringConvertible {
  public var safeForLoggingDescription: Swift.String {
    get
  }
}
@objc extension ZMSLog {
  @objc public static func set(level: WireSystem.ZMLogLevel_t, tag: Swift.String)
  @objc public static func getLevel(tag: Swift.String) -> WireSystem.ZMLogLevel_t
  @objc public static var allTags: [Swift.String] {
    @objc get
  }
}
extension ZMSLog {
  @objc public static func startRecording(isInternal: Swift.Bool = true)
  @objc public static func stopRecording()
}
public func fatal(_ message: Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> Swift.Never
public func require(_ condition: Swift.Bool, _ message: Swift.String = "", file: Swift.StaticString = #file, line: Swift.UInt = #line)
@objc public enum Environment : Swift.UInt8 {
  case appStore, `internal`, debug, develop, unknown
  public typealias RawValue = Swift.UInt8
  public init?(rawValue: Swift.UInt8)
  public var rawValue: Swift.UInt8 {
    get
  }
}
public func requireInternal(_ condition: Swift.Bool, _ message: @autoclosure () -> Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line)
public func requireInternalFailure(_ message: @autoclosure () -> Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line)
extension DispatchQueue {
  public func async(group: WireSystem.ZMSDispatchGroup?, execute: @escaping () -> Swift.Void)
}
extension WireSystem.Environment : Swift.Equatable {}
extension WireSystem.Environment : Swift.Hashable {}
extension WireSystem.Environment : Swift.RawRepresentable {}
