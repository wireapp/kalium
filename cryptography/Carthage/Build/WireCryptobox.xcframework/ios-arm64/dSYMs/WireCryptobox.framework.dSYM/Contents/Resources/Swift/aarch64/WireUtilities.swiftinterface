// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WireUtilities
import CoreData
import CoreServices
import Foundation
import ImageIO
import LocalAuthentication
import MobileCoreServices
import Security
import Swift
import UIKit
import UniformTypeIdentifiers
import WireSystem
@_exported import WireUtilities
public func curry<A, B>(_ f: @escaping (A) -> B) -> (A) -> B
public func curry<A, B, C>(_ f: @escaping ((A, B)) -> C) -> (A) -> (B) -> C
public func curry<A, B, C, D>(_ f: @escaping ((A, B, C)) -> D) -> (A) -> (B) -> (C) -> D
public func curry<A, B, C, D, E>(_ f: @escaping ((A, B, C, D)) -> E) -> (A) -> (B) -> (C) -> (D) -> E
public func curry<A, B, C, D, E, F>(_ f: @escaping ((A, B, C, D, E)) -> F) -> (A) -> (B) -> (C) -> (D) -> (E) -> F
public func curry<A, B, C, D, E, F, G>(_ g: @escaping ((A, B, C, D, E, F)) -> G) -> (A) -> (B) -> (C) -> (D) -> (E) -> (F) -> G
extension CharacterSet {
  public static var diacriticsCombining: Foundation.CharacterSet
}
extension Unicode.Scalar {
  public var isDiacritics: Swift.Bool {
    get
  }
}
extension String {
  public var removingExtremeCombiningCharacters: Swift.String {
    get
  }
}
extension NSString {
  @objc(stringByRemovingExtremeCombiningCharacters) dynamic public var removingExtremeCombiningCharacters: Foundation.NSString {
    @objc get
  }
}
extension Array {
  public func partition<Key>(by keyPath: Swift.KeyPath<Element, Key?>) -> [Key : [Element]] where Key : Swift.Hashable
  public func partition<Key>(by keyPath: Swift.KeyPath<Element, Key>) -> [Key : [Element]] where Key : Swift.Hashable
}
public class VolatileData {
  public var _storage: Foundation.Data {
    get
  }
  public init(from data: Foundation.Data)
  @objc deinit
  public func resetBytes()
}
@objc public enum ZMManagedObjectValidationErrorCode : Swift.Int, Swift.Error {
  case tooLong
  case tooShort
  case emailAddressIsInvalid
  case phoneNumberContainsInvalidCharacters
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
public protocol ZMPropertyValidator {
  static func validateValue(_ ioValue: Swift.AutoreleasingUnsafeMutablePointer<Swift.AnyObject?>!) throws
}
extension NSUUID {
  @objc dynamic public var isType1UUID: Swift.Bool {
    @objc get
  }
  @objc dynamic public var type1Timestamp: Foundation.Date? {
    @objc get
  }
  @objc dynamic public func compare(withType1UUID type1UUID: Foundation.NSUUID) -> Foundation.ComparisonResult
  @objc public static func timeBasedUUID() -> Foundation.NSUUID
}
extension UUID {
  public var isType1UUID: Swift.Bool {
    get
  }
  public var type1Timestamp: Foundation.Date? {
    get
  }
  public func compare(withType1UUID type1UUID: Foundation.NSUUID) -> Foundation.ComparisonResult
  public static func timeBasedUUID() -> Foundation.NSUUID
}
extension UUID {
  public var uuidData: Foundation.Data {
    get
  }
  public init?(data: Foundation.Data)
}
prefix public func ! <T>(f: @escaping (T) -> Swift.Bool) -> (T) -> Swift.Bool
extension Dictionary {
  public init<T, S>(_ sequence: S, keyMapping: (T) -> Key, valueMapping: (T) -> Value) where T == S.Element, S : Swift.Sequence
  public func mapKeysAndValues<NewKey, NewValue>(keysMapping: ((Key) -> NewKey), valueMapping: ((Key, Value) -> NewValue?)) -> Swift.Dictionary<NewKey, NewValue> where NewKey : Swift.Hashable
  public func mapKeys<T>(_ transform: (Key) -> T) -> [T : Value] where T : Swift.Hashable
  public init(keys: [Key], repeatedValue: Value)
  public func updated(other: Swift.Dictionary<Key, Value>) -> Swift.Dictionary<Key, Value>
}
extension Sequence {
  public func dictionary<K, V>(_ transform: (Self.Iterator.Element) throws -> (key: K, value: V)) rethrows -> [K : V] where K : Swift.Hashable
}
public struct SwiftDebugging {
  public static func address(_ object: Swift.AnyObject) -> Swift.Int
  public static func pointerDescription(_ object: CoreData.NSManagedObject) -> Swift.String
  public static func sequenceDescription<T>(_ sequence: Swift.AnySequence<T>) -> Swift.String
  public static func sequenceDescription<S>(_ sequence: S) -> Swift.String where S : Swift.Sequence
  public static func shortDescription(_ value: Any) -> Swift.String
}
extension FixedWidthInteger {
  public static func secureRandomNumber(upperBound: Self) -> Self
}
extension NSNumber {
  @objc public static func secureRandomNumber(upperBound: Swift.UInt32) -> Swift.UInt32
}
extension Sequence {
  public func map<Value>(_ keyPath: Swift.KeyPath<Self.Element, Value>) -> [Value]
  public func flatMap<Value>(_ keyPath: Swift.KeyPath<Self.Element, [Value]>) -> [Value]
  public func compactMap<Value>(_ keyPath: Swift.KeyPath<Self.Element, Value?>) -> [Value]
  public func filter(_ keyPath: Swift.KeyPath<Self.Element, Swift.Bool>) -> [Self.Element]
  public func any(_ keyPath: Swift.KeyPath<Self.Element, Swift.Bool>) -> Swift.Bool
  public func all(_ keyPath: Swift.KeyPath<Self.Element, Swift.Bool>) -> Swift.Bool
}
extension Optional {
  public func map<Value>(_ keyPath: Swift.KeyPath<Wrapped, Value>) -> Value?
  public func flatMap<Value>(_ keyPath: Swift.KeyPath<Wrapped, Value?>) -> Value?
}
public struct AnyConstantProperty<Value> {
  public let getter: () -> Value
  public init<Base>(_ base: Base, keyPath: Swift.KeyPath<Base, Value>)
}
public struct AnyMutableProperty<Value> {
  public let getter: () -> Value
  public let setter: (Value) -> Swift.Void
  public init<Base>(_ base: Base, keyPath: Swift.ReferenceWritableKeyPath<Base, Value>)
}
@_inheritsConvenienceInitializers @objc public class ZMPhoneNumberValidator : ObjectiveC.NSObject, WireUtilities.ZMPropertyValidator {
  @objc(validateValue:error:) public static func validateValue(_ ioValue: Swift.AutoreleasingUnsafeMutablePointer<Swift.AnyObject?>!) throws
  @discardableResult
  public static func validateValue(_ ioValue: inout Any?) throws -> Swift.Bool
  @objc(isValidPhoneNumber:) public static func isValidPhoneNumber(_ phoneNumber: Swift.String) -> Swift.Bool
  @objc(validatePhoneNumber:) public static func validate(phoneNumber: Swift.String) -> Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
public struct SetGenerator<Element> : Swift.IteratorProtocol where Element : Swift.Hashable {
  public init(_ d: Swift.Dictionary<Element, Swift.Void>)
  public mutating func next() -> Element?
}
extension NSSet {
  @objc dynamic public func union(_ s: Foundation.NSSet) -> Foundation.NSSet
  @objc dynamic public var isEmpty: Swift.Bool {
    @objc get
  }
}
extension NSManagedObjectContext {
  @discardableResult
  public func performGroupedAndWait<T>(_ execute: @escaping (CoreData.NSManagedObjectContext) -> T) -> T
  @discardableResult
  public func performGroupedAndWait<T>(_ execute: @escaping (CoreData.NSManagedObjectContext) throws -> T) throws -> T
}
extension UIColor {
  @objc dynamic public func mix(_ color: UIKit.UIColor, amount progress: CoreGraphics.CGFloat) -> UIKit.UIColor
  public func removeAlphaByBlending(with color: UIKit.UIColor) -> UIKit.UIColor
}
public enum ExtremeCombiningCharactersValidationError : Swift.Error {
  case containsExtremeCombiningCharacters
  case notAString
  public static func == (a: WireUtilities.ExtremeCombiningCharactersValidationError, b: WireUtilities.ExtremeCombiningCharactersValidationError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_inheritsConvenienceInitializers @objc public class ExtremeCombiningCharactersValidator : ObjectiveC.NSObject, WireUtilities.ZMPropertyValidator {
  @objc(validateValue:error:) public static func validateValue(_ ioValue: Swift.AutoreleasingUnsafeMutablePointer<Swift.AnyObject?>!) throws
  @discardableResult
  public static func validateCharactersValue(_ ioValue: inout Any?) throws -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
extension String {
  public mutating func stripPrefix(_ prefix: Swift.String)
  public func strippingPrefix(_ prefix: Swift.String) -> Swift.String
  public func strippingLeadingAtSign() -> Swift.String
}
@objc public protocol TearDownCapable : ObjectiveC.NSObjectProtocol {
  @objc func tearDown()
}
extension String {
  public var normalizedFilename: Swift.String {
    get
  }
  public func trimmedFilename(numReservedChar: Swift.Int) -> Swift.String
}
extension FileManager {
  public func createAndProtectDirectory(at url: Foundation.URL)
  public func setProtectionUntilFirstUserAuthentication(_ url: Foundation.URL)
}
extension URL {
  public func excludeFromBackup() throws
  public func excludeFromBackupIfExists() throws
  public var isExcludedFromBackup: Swift.Bool {
    get
  }
  public static func directory(for searchPathDirectory: Foundation.FileManager.SearchPathDirectory) -> Foundation.URL
}
public protocol KeychainItem {
  associatedtype Value
  func queryForSetting(value: Self.Value) -> [CoreFoundation.CFString : Any]
  var queryForGettingValue: [CoreFoundation.CFString : Any] { get }
}
public enum Keychain {
  public enum KeychainError : Swift.Error {
    case failedToStoreItemInKeychain(Darwin.OSStatus)
    case failedToFetchItemFromKeychain(Darwin.OSStatus?)
    case failedToDeleteItemFromKeychain(Darwin.OSStatus)
  }
  public static func storeItem<T>(_ item: T, value: T.Value) throws where T : WireUtilities.KeychainItem
  public static func fetchItem<T>(_ item: T) throws -> T.Value where T : WireUtilities.KeychainItem
  public static func deleteItem<T>(_ item: T) throws where T : WireUtilities.KeychainItem
  public static func updateItem<T>(_ item: T, value: T.Value) throws where T : WireUtilities.KeychainItem
}
@_inheritsConvenienceInitializers @objc public class ZMEmailAddressValidator : ObjectiveC.NSObject, WireUtilities.ZMPropertyValidator {
  @objc(validateValue:error:) public static func validateValue(_ ioValue: Swift.AutoreleasingUnsafeMutablePointer<Swift.AnyObject?>!) throws
  @discardableResult
  public static func validateValue(_ ioValue: inout Any?) throws -> Swift.Bool
  @objc(isValidEmailAddress:) public static func isValidEmailAddress(_ emailAddress: Swift.String) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class ZMAccentColorValidator : ObjectiveC.NSObject, WireUtilities.ZMPropertyValidator {
  @objc(validateValue:error:) public static func validateValue(_ ioValue: Swift.AutoreleasingUnsafeMutablePointer<Swift.AnyObject?>!) throws
  @discardableResult
  public static func validateValue(_ ioValue: inout Any?) throws -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc final public class UTIHelper : ObjectiveC.NSObject {
  final public class func conformsToGifType(uti: Swift.String) -> Swift.Bool
  @objc final public class func conformsToImageType(uti: Swift.String) -> Swift.Bool
  @objc final public class func conformsToVectorType(uti: Swift.String) -> Swift.Bool
  @objc final public class func conformsToJsonType(uti: Swift.String) -> Swift.Bool
  final public class func conformsToGifType(mime: Swift.String) -> Swift.Bool
  final public class func conformsToAudioType(mime: Swift.String) -> Swift.Bool
  final public class func conformsToMovieType(mime: Swift.String) -> Swift.Bool
  final public class func conformsToVectorType(mime: Swift.String) -> Swift.Bool
  final public class func convertToFileExtension(mime: Swift.String) -> Swift.String?
  @objc final public class func convertToUti(mime: Swift.String) -> Swift.String?
  final public class func convertToMime(fileExtension: Swift.String) -> Swift.String?
  @objc final public class func convertToMime(uti: Swift.String) -> Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
extension Data {
  public var readableHash: Swift.String {
    get
  }
}
public func < <T>(lhs: T?, rhs: T?) -> Swift.Bool where T : Swift.Comparable
public func > <T>(lhs: T?, rhs: T?) -> Swift.Bool where T : Swift.Comparable
extension CharacterSet {
  public static let asciiPrintableSet: Foundation.CharacterSet
  public static let unicode: Foundation.CharacterSet
  public static let asciiUppercaseLetters: Foundation.CharacterSet
  public static let asciiLowercaseLetters: Foundation.CharacterSet
  public static let asciiStandardCharacters: Foundation.CharacterSet
}
extension Character {
  public func contains(anyCharacterFrom characterSet: Foundation.CharacterSet) -> Swift.Bool
}
extension String {
  public var containsEmoji: Swift.Bool {
    get
  }
  public var containsOnlyEmojiWithSpaces: Swift.Bool {
    get
  }
}
extension String {
  public var readableHash: Swift.String {
    get
  }
}
extension Optional {
  public func apply(_ block: (Wrapped) -> Swift.Void)
}
extension IndexSet {
  public init(integersIn range: Swift.Range<Foundation.IndexSet.Element>, excluding: [Swift.Range<Foundation.IndexSet.Element>])
}
extension Equatable {
  public func isOne(of others: Self...) -> Swift.Bool
  public func isOne<T>(of others: T) -> Swift.Bool where Self == T.Element, T : Swift.Collection
}
extension Data {
  public var mimeType: Swift.String? {
    get
  }
}
extension NSData {
  @objc dynamic public func isDataAnimatedGIF() -> Swift.Bool
}
public func papply<A, B>(_ a2b: @escaping (A) -> B, _ a: A) -> () -> B
public func papply<A, B, C>(_ ab2c: @escaping (A, B) -> C, _ a: A) -> (B) -> C
public func papply<A, B, C, D>(_ abc2d: @escaping (A, B, C) -> D, _ a: A) -> (B, C) -> D
public func papply<A, B, C, D, E>(_ abcd2e: @escaping (A, B, C, D) -> E, _ a: A) -> (B, C, D) -> E
public func papply<A, B, C, D, E, F>(_ abcde2f: @escaping (A, B, C, D, E) -> F, _ a: A) -> (B, C, D, E) -> F
final public class UnownedObject<T> where T : AnyObject {
  weak final public var unbox: T?
  public init(_ o: T)
  final public var isValid: Swift.Bool {
    get
  }
  @objc deinit
}
@objc @objcMembers public class UnownedNSObject : ObjectiveC.NSObject {
  @objc weak public var unbox: ObjectiveC.NSObject?
  @objc public init(_ unbox: ObjectiveC.NSObject)
  @objc open var isValid: Swift.Bool {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension Collection {
  public func element(atIndex index: Self.Index) -> Self.Element?
}
extension FileManager {
  @objc dynamic public func moveFolderRecursively(from source: Foundation.URL, to destination: Foundation.URL, overwriteExistingFiles: Swift.Bool) throws
  @objc dynamic public func copyFolderRecursively(from source: Foundation.URL, to destination: Foundation.URL, overwriteExistingFiles: Swift.Bool) throws
}
extension Array {
  public func shifted(by amount: Swift.Int) -> Swift.Array<Element>
}
public func flip<A, B>(_ f: @escaping (A) -> B) -> (A) -> B
public func flip<A, B, C>(_ f: @escaping ((A, B)) -> C) -> (B, A) -> C
public func flip<A, B, C, D>(_ f: @escaping ((A, B, C)) -> D) -> (C, B, A) -> D
public func flip<A, B, C, D, E>(_ f: @escaping ((A, B, C, D)) -> E) -> (D, C, B, A) -> E
@objc @objcMembers public class DispatchGroupQueue : ObjectiveC.NSObject, WireSystem.ZMSGroupQueue {
  @objc public init(queue: Dispatch.DispatchQueue)
  @objc public var dispatchGroup: WireSystem.ZMSDispatchGroup! {
    @objc get
  }
  @objc public func add(_ group: WireSystem.ZMSDispatchGroup)
  @objc public func performGroupedBlock(_ block: @escaping () -> Swift.Void)
  @objc deinit
  @objc override dynamic public init()
}
public struct Enumerator : Swift.Sequence {
  public init(_ object: Foundation.NSFastEnumeration)
  public func makeIterator() -> Foundation.NSFastEnumerationIterator
  public func allObjects() -> [Swift.AnyObject]
  public typealias Element = Foundation.NSFastEnumerationIterator.Element
  public typealias Iterator = Foundation.NSFastEnumerationIterator
}
extension String {
  public static let breakingSpace: Swift.String
  public static let nonBreakingSpace: Swift.String
}
extension IteratorProtocol {
  public mutating func any(_ predicate: (Self.Element) throws -> Swift.Bool) rethrows -> Swift.Bool
  public mutating func all(_ predicate: (Self.Element) throws -> Swift.Bool) rethrows -> Swift.Bool
}
extension Sequence {
  public func any(_ predicate: (Self.Iterator.Element) throws -> Swift.Bool) rethrows -> Swift.Bool
  public func all(_ predicate: (Self.Iterator.Element) throws -> Swift.Bool) rethrows -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class DispatchGroupContext : ObjectiveC.NSObject {
  @objc public var groups: [WireSystem.ZMSDispatchGroup] {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
infix operator >>> : AdditionPrecedence
public func >>> <A, B, C>(f: @escaping (B) -> C, g: @escaping (A) -> B) -> (A) -> C
extension FileManager {
  public func isFileSystemAccessible() -> Swift.Bool
  public func executeWhenFileSystemIsAccessible(_ block: @escaping () -> Swift.Void) -> Any?
}
@objc @objcMembers public class SelfUnregisteringNotificationCenterToken : ObjectiveC.NSObject {
  @objc deinit
  @objc public init(_ token: Any)
  @objc override dynamic public init()
}
extension Data {
  public func zmMD5Digest() -> Foundation.Data
  public func zmHMACSHA256Digest(key: Foundation.Data) -> Foundation.Data
  public func zmHexEncodedString() -> Swift.String
  public static func zmRandomSHA256Key() -> Foundation.Data
  public func zmSHA256Digest() -> Foundation.Data
  public func base64String() -> Swift.String
  public func zmEncryptPrefixingIV(key: Foundation.Data) -> Foundation.Data
  public func zmDecryptPrefixedIV(key: Foundation.Data) -> Foundation.Data
  public func zmEncryptPrefixingPlainTextIV(key: Foundation.Data) -> Foundation.Data
  public func zmDecryptPrefixedPlainTextIV(key: Foundation.Data) -> Foundation.Data?
  public static func secureRandomData(length: Swift.UInt) -> Foundation.Data
  public static func randomEncryptionKey() -> Foundation.Data
}
public enum Result<T> {
  case success(T)
  case failure(Swift.Error)
}
public enum VoidResult {
  case success
  case failure(Swift.Error)
}
extension Result {
  public func map<U>(_ transform: (T) throws -> U) -> WireUtilities.Result<U>
}
extension Result {
  public var value: T? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
extension VoidResult {
  public init<T>(result: WireUtilities.Result<T>)
  public init(error: Swift.Error?)
  public var error: Swift.Error? {
    get
  }
}
extension UIColor {
  convenience public init(rgb: Swift.UInt, alpha: CoreGraphics.CGFloat = 1.0)
  public var alpha: CoreGraphics.CGFloat {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers open class StringLengthValidator : ObjectiveC.NSObject {
  @objc @_inheritsConvenienceInitializers public class StringLengthError : Foundation.NSError {
    @objc deinit
    @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
    @objc required dynamic public init?(coder: Foundation.NSCoder)
  }
  @objc(validateValue:minimumStringLength:maximumStringLength:maximumByteLength:error:) public static func validateValue(_ ioValue: Swift.AutoreleasingUnsafeMutablePointer<Swift.AnyObject?>!, minimumStringLength: Swift.UInt32, maximumStringLength: Swift.UInt32, maximumByteLength: Swift.UInt32) throws
  @discardableResult
  public static func validateStringValue(_ ioValue: inout Any?, minimumStringLength: Swift.UInt32, maximumStringLength: Swift.UInt32, maximumByteLength: Swift.UInt32) throws -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
extension NSOrderedSet {
  public func subtracting(orderedSet: Foundation.NSOrderedSet) -> Foundation.NSOrderedSet
  public func adding(orderedSet: Foundation.NSOrderedSet) -> Foundation.NSOrderedSet
}
@_hasMissingDesignatedInitializers public class DarwinNotificationCenter {
  public static var shared: WireUtilities.DarwinNotificationCenter
  public typealias Handler = () -> Swift.Void
  public func observe(notification: WireUtilities.DarwinNotification, using handler: @escaping WireUtilities.DarwinNotificationCenter.Handler)
  @objc deinit
}
public enum DarwinNotification : Swift.String {
  case shareExtDidSaveNote
  public func post()
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension UIColor {
  public struct Components : Swift.Equatable {
    public var red: CoreGraphics.CGFloat
    public var green: CoreGraphics.CGFloat
    public var blue: CoreGraphics.CGFloat
    public var alpha: CoreGraphics.CGFloat
    public init(color: UIKit.UIColor)
    public static func == (a: UIKit.UIColor.Components, b: UIKit.UIColor.Components) -> Swift.Bool
  }
  public var components: UIKit.UIColor.Components {
    get
  }
  public static func == (lhs: UIKit.UIColor, rhs: UIKit.UIColor) -> Swift.Bool
  convenience public init(rgba: (red: CoreGraphics.CGFloat, green: CoreGraphics.CGFloat, blue: CoreGraphics.CGFloat, alpha: CoreGraphics.CGFloat))
  convenience public init(rgb: (red: CoreGraphics.CGFloat, green: CoreGraphics.CGFloat, blue: CoreGraphics.CGFloat))
}
extension WireUtilities.ZMManagedObjectValidationErrorCode : Swift.Equatable {}
extension WireUtilities.ZMManagedObjectValidationErrorCode : Swift.Hashable {}
extension WireUtilities.ZMManagedObjectValidationErrorCode : Swift.RawRepresentable {}
extension WireUtilities.ExtremeCombiningCharactersValidationError : Swift.Equatable {}
extension WireUtilities.ExtremeCombiningCharactersValidationError : Swift.Hashable {}
extension WireUtilities.DarwinNotification : Swift.Equatable {}
extension WireUtilities.DarwinNotification : Swift.Hashable {}
extension WireUtilities.DarwinNotification : Swift.RawRepresentable {}
