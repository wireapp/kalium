// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef WIRECRYPTOBOX_SWIFT_H
#define WIRECRYPTOBOX_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="WireCryptobox",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSURL;
@class EncryptionSessionsDirectory;
@class EncryptionSessionIdentifier;
@class NSNumber;

/// A cryptobox context that manages access to sessions, allowing the
/// same sessions to be accessed by multuple processes in a safe way.
/// Inside a process, only a single session context should be used.
/// note:
///
/// In order to be used by multiple processes (see iOS extensions), cryptobox needs to lock the
/// directory with the key material as it works on it, so that no other process will touch it.
/// This class introduces the concept of <em>encryption context</em>, similar to the concept of context in Core Data.
/// A context must be used only from a single thread. Multiple contexts can refer to the same
/// directory on disk, locking the directory when needed so that they donâ€™t interfere with
/// each other.
/// Conflicts and race conditions are avoided by loading from disk and saving to disk
/// every time a context it used, and locking around these operations.
/// This is slow, but extensions are not supposed to need to access
/// cryptobox very frequently.
/// The intended use of this class is:
/// <ol>
///   <li>
///     Create context once, reuse the same context to avoid having to create/load identity
///     (which never changes once created, so no race condition other than during creation)
///   </li>
///   <li>
///     use <code>perform:</code> with a block to create sessions, prekeys, encrypt and decrypt.
///     During the execution of the block, the directory is locked.
///     When decrypting, the decrypted data should be saved synchronously inside this block
///     (e.g. in case of Core Data, should be inserted and immediately saved) to enforce it
///     being saved before the session state is persisted later.
///     If the decrypted data is not persisted, and there is a crash before the data is
///     persisted, the data is lost forever as it can not be decrypted again once the session
///     is saved.
///   </li>
///   <li>
///     When the block passed to <code>perform:</code> is completed, the sessions are persisted to disk.
///     The lock is relased.
///   </li>
/// </ol>
SWIFT_CLASS("_TtC13WireCryptobox17EncryptionContext")
@interface EncryptionContext : NSObject
/// Opens cryptobox from a given folder
///
/// throws:
/// CryptoBox error in case of lower-level error
- (nonnull instancetype)initWithPath:(NSURL * _Nonnull)path OBJC_DESIGNATED_INITIALIZER;
/// Access sessions and other data in this context. While the block is executed,
/// no other process can use sessions from this context. If another process or thread is already
/// using sessions from a context with the same path, this call will block until the other process
/// stops using sessions. Nested calls to this method on the same objects on the same
/// thread are allowed.
/// warning:
/// this method is not thread safe
- (void)perform:(SWIFT_NOESCAPE void (^ _Nonnull)(EncryptionSessionsDirectory * _Nonnull))block;
/// Enables or disables extended logging for any message encrypted from or to
/// a specific session.
/// note: if the session is already cached in memory, this will apply from the
/// next time the session is reloaded
- (void)setExtendedLoggingWithIdentifier:(EncryptionSessionIdentifier * _Nonnull)identifier enabled:(BOOL)enabled;
/// Disable extensive logging on all sessions
- (void)disableExtendedLoggingOnAllSessions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, EncryptionSessionError, closed) {
  EncryptionSessionErrorUnknown = 0,
  EncryptionSessionErrorEncryptionFailed = 1,
  EncryptionSessionErrorDecryptionFailed = 2,
};

@class NSString;

SWIFT_CLASS("_TtC13WireCryptobox27EncryptionSessionIdentifier")
@interface EncryptionSessionIdentifier : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithDomain:(NSString * _Nullable)domain userId:(NSString * _Nonnull)userId clientId:(NSString * _Nonnull)clientId OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSData;
@class GenericHash;

/// An encryption state that is usable to encrypt/decrypt messages
/// It maintains an in-memory cache of encryption sessions with other clients
/// that is persisted to disk as soon as it is deallocated.
SWIFT_CLASS("_TtC13WireCryptobox27EncryptionSessionsDirectory")
@interface EncryptionSessionsDirectory : NSObject
/// Local fingerprint
@property (nonatomic, copy) NSData * _Nonnull localFingerprint;
- (nonnull instancetype)initWithGeneratingContext:(EncryptionContext * _Nonnull)generatingContext encryptionPayloadCache:(NSDictionary<GenericHash *, NSData *> * _Nonnull)encryptionPayloadCache extensiveLoggingSessions:(NSSet<EncryptionSessionIdentifier *> * _Nonnull)extensiveLoggingSessions OBJC_DESIGNATED_INITIALIZER;
/// Encrypts data for a client. Caches the encrypted payload based on <code>hash(data + recepient)</code> as the cache key.
/// It invokes @c encrypt() in case of the cache miss.
///
/// throws:
/// EncryptionSessionError in case no session with given recipient
- (NSData * _Nullable)encryptCaching:(NSData * _Nonnull)plainText for:(EncryptionSessionIdentifier * _Nonnull)recipientIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Purges the cache of encrypted payloads created as the result of @c encryptCaching() call
- (void)purgeEncryptedPayloadCache;
- (void)migrateSessionFrom:(NSString * _Nonnull)previousIdentifier to:(EncryptionSessionIdentifier * _Nonnull)newIdentifier;
- (BOOL)createClientSession:(EncryptionSessionIdentifier * _Nonnull)identifier base64PreKeyString:(NSString * _Nonnull)base64PreKeyString error:(NSError * _Nullable * _Nullable)error;
- (NSData * _Nullable)createClientSessionAndReturnPlaintextFor:(EncryptionSessionIdentifier * _Nonnull)identifier prekeyMessage:(NSData * _Nonnull)prekeyMessage error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (void)delete:(EncryptionSessionIdentifier * _Nonnull)identifier;
- (BOOL)hasSessionFor:(EncryptionSessionIdentifier * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Save and unload all transient sessions
- (void)commitCache;
- (NSData * _Nullable)fingerprintFor:(EncryptionSessionIdentifier * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Generates one prekey of the given ID. If the prekey exists already,
/// it will replace that prekey
///
/// returns:
/// base 64 encoded string
- (NSString * _Nullable)generatePrekey:(uint16_t)id error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Generates the last prekey. If the prekey exists already,
/// it will replace that prekey
- (NSString * _Nullable)generateLastPrekeyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Generates prekeys from a range of IDs. If prekeys with those IDs exist already,
/// they will be replaced
/// This method wraps the Swift only method generatePrekeys(range: Range<UInt16>) for objC interoparability
- (NSArray<NSDictionary<NSString *, id> *> * _Nullable)generatePrekeys:(NSRange)nsRange error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Extracts the fingerprint from a prekey
///
/// returns:
/// HEX encoded fingerprint
+ (NSData * _Nullable)fingerprintFromPrekey:(NSData * _Nonnull)prekey SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)encrypt:(NSData * _Nonnull)plainText for:(EncryptionSessionIdentifier * _Nonnull)recipientIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)decrypt:(NSData * _Nonnull)cypherText from:(EncryptionSessionIdentifier * _Nonnull)senderIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Encapsulates the hash value.
SWIFT_CLASS("_TtC13WireCryptobox11GenericHash")
@interface GenericHash : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GenericHash (SWIFT_EXTENSION(WireCryptobox))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
