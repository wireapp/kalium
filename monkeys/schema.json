{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://wire.com/monkeys.schema.json",
    "title": "Infinite Monkeys Configuration",
    "description": "Configuration for the Infinite Monkeys application",
    "type": "object",
    "required": [
        "testCases",
        "backends"
    ],
    "properties": {
        "externalMonkey": {
            "description": "Defines the configuration for executing the external monkeys in separate processes",
            "type": "object",
            "required": [
                "startCommand",
                "addressTemplate"
            ],
            "properties": {
                "startCommand": {
                    "description": "The command to start the process. For example kubectl to start a pod or docker to start a container. It can be templated with the following fields: teamName, email, userId, teamId, monkeyIndex, monkeyClientId",
                    "type": "string",
                    "examples": [
                        "/opt/app/monkeys/bin/monkey-server -p 80{{monkeyIndex}}",
                        "kubectl run monkey --image monkeys --overrides='{\"spec\": {\"hostname\": \"monkey-{{monkeyIndex}}\"}}' --command -- /opt/app/monkeys/bin/monkey-server"
                    ]
                },
                "addressTemplate": {
                    "description": "The template to resolve the address of the individual monkey. It can be templated with the following fields: teamName, email, userId, teamId, monkeyIndex, monkeyClientId",
                    "type": "string",
                    "examples": [
                        "http://localhost:80{{monkeyIndex}}",
                        "http://monkey-{{monkeyIndex}}.my-namespace.svc.cluster.local"
                    ]
                },
                "waitTime": {
                    "description": "Time in seconds to wait for the process to be ready. It won't verify if it was successful",
                    "type": "integer"
                }
            }
        },
        "eventStorage": {
            "description": "Defines the storage of events for replaying the test later",
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "description": "The type of file storage.",
                    "type": "string",
                    "enum": [
                        "FILE",
                        "POSTGRES"
                    ]
                }
            },
            "additionalProperties": {
                "oneOf": [
                    {
                        "$ref": "#/$defs/PostgresStorage"
                    },
                    {
                        "$ref": "#/$defs/FileStorage"
                    }
                ]
            }
        },
        "conversationDistribution": {
            "description": "List of predefined groups to run the tests. A random user will be selected to create (if not logged in, it will automatically) and it will include only other users it is connected to.",
            "type": "object",
            "patternProperties": {
                ".*": {
                    "type": "object",
                    "required": [
                        "userCount",
                        "groupCount"
                    ],
                    "properties": {
                        "userCount": {
                            "$ref": "#/$defs/UserCount"
                        },
                        "protocol": {
                            "description": "The protocol of the group",
                            "type": "string",
                            "enum": [
                                "MLS",
                                "PROTEUS"
                            ]
                        },
                        "groupCount": {
                            "description": "The number of groups that should be created",
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "testCases": {
            "description": "List of test cases to run in parallel",
            "type": "array",
            "minItems": 1,
            "items": {
                "description": "Test Case to be executed",
                "type": "object",
                "required": [
                    "name",
                    "actions"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the test case",
                        "type": "string"
                    },
                    "setup": {
                        "description": "List of actions to be executed prior to the test's execution. For things like connecting users to each other.",
                        "type": "array",
                        "items": {
                            "$ref": "#/$defs/ActionConfig"
                        }
                    },
                    "actions": {
                        "description": "List of actions to be executed in parallel. Mind that the parallelism is constrained by the machine executing it.",
                        "type": "array",
                        "items": {
                            "$ref": "#/$defs/ActionConfig"
                        }
                    }
                }
            }
        },
        "backends": {
            "description": "Backends/Teams to run the test",
            "type": "array",
            "minItems": 1,
            "items": {
                "type": "object",
                "required": [
                    "api",
                    "accounts",
                    "webSocket",
                    "blackList",
                    "teams",
                    "website",
                    "title",
                    "passwordForUsers",
                    "domain",
                    "authUser",
                    "authPassword"
                ],
                "properties": {
                    "api": {
                        "description": "Link for the backend API of the team",
                        "type": "string"
                    },
                    "accounts": {
                        "description": "Link for the accounts API of the team",
                        "type": "string"
                    },
                    "webSocket": {
                        "description": "Link for the websocket of the team",
                        "type": "string"
                    },
                    "blackList": {
                        "description": "List of client blacklist of the team",
                        "type": "string"
                    },
                    "teams": {
                        "description": "Link of the team API",
                        "type": "string"
                    },
                    "website": {
                        "description": "Link of the website of the team",
                        "type": "string"
                    },
                    "title": {
                        "description": "Title of the team",
                        "type": "string"
                    },
                    "passwordForUsers": {
                        "description": "Password used to authenticate all users within the team",
                        "type": "string"
                    },
                    "domain": {
                        "description": "Domain identifier of the team",
                        "type": "string"
                    },
                    "authUser": {
                        "description": "The backend API user to authenticate in order to access its APIs",
                        "type": "string"
                    },
                    "authPassword": {
                        "description": "The backend API password to authenticate in order to access its APIs",
                        "type": "string"
                    },
                    "userCount": {
                        "description": "How many users should be created in this team",
                        "type": "integer",
                        "default": 10
                    },
                    "2FAEnabled": {
                        "description": "Does this server require 2FA authentication?",
                        "type": "boolean",
                        "default": false
                    },
                    "dumpUsers": {
                        "description": "Should the application dump the users created into a file",
                        "type": "boolean"
                    },
                    "presetTeam": {
                        "description": "Team configuration and its users to use instead of creating them",
                        "type": "object",
                        "required": [
                            "id",
                            "owner",
                            "users"
                        ],
                        "properties": {
                            "id": {
                                "description": "The team id",
                                "type": "string"
                            },
                            "owner": {
                                "description": "The creator of the group. It will be used to fetch the team's users, so it must have permission in the API to do so",
                                "type": "object",
                                "required": [
                                    "email",
                                    "id"
                                ],
                                "properties": {
                                    "email": {
                                        "description": "Email of the user",
                                        "type": "string"
                                    },
                                    "id": {
                                        "description": "UUID of the user",
                                        "type": "string"
                                    }
                                }
                            },
                            "users": {
                                "description": "All users that are going to be used in the test. If set the parameters to create users will be ignored",
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "required": [
                                        "email",
                                        "id"
                                    ],
                                    "properties": {
                                        "email": {
                                            "description": "Email of the user",
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "UUID of the user",
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "$defs": {
        "UserCount": {
            "description": "Defines the amount of users that will be executing an action",
            "type": "object",
            "required": [
                "type",
                "value"
            ],
            "properties": {
                "type": {
                    "description": "Set the config to either a percentage or a fixed number",
                    "enum": [
                        "PERCENTAGE",
                        "FIXED_COUNT"
                    ]
                },
                "value": {
                    "description": "The value, which should be either the percentage (1 to 100) or an arbitrary unsigned number",
                    "type": "integer"
                }
            }
        },
        "ActionConfig": {
            "description": "Configuration of each action to be executed",
            "type": "object",
            "required": [
                "description",
                "config"
            ],
            "properties": {
                "description": {
                    "description": "A text describing the action",
                    "type": "string"
                },
                "count": {
                    "description": "How many times the action should be executed each round. Defaults to 1 and in the setup it will be ignored",
                    "type": "integer"
                },
                "repeatInterval": {
                    "description": "How long in milliseconds, should the app wait until next execution. This property is ignored in the setup. Defaults to 0. Please set this up as this can overload the computer running the application. Ignored in the setup",
                    "type": "integer"
                },
                "config": {
                    "description": "The configuration of the action, each type has its own parameters",
                    "type": "object",
                    "properties": {
                        "type": {
                            "enum": [
                                "LOGIN",
                                "RECONNECT",
                                "SEND_MESSAGE",
                                "CREATE_CONVERSATION",
                                "ADD_USERS_TO_CONVERSATION",
                                "LEAVE_CONVERSATION",
                                "DESTROY_CONVERSATION",
                                "SEND_REQUEST",
                                "HANDLE_EXTERNAL_REQUEST",
                                "SEND_EXTERNAL_REQUEST"
                            ]
                        }
                    },
                    "additionalProperties": {
                        "oneOf": [
                            {
                                "$ref": "#/$defs/Login"
                            },
                            {
                                "$ref": "#/$defs/Reconnect"
                            },
                            {
                                "$ref": "#/$defs/SendMessage"
                            },
                            {
                                "$ref": "#/$defs/CreateConversation"
                            },
                            {
                                "$ref": "#/$defs/AddUsersToConversation"
                            },
                            {
                                "$ref": "#/$defs/LeaveConversation"
                            },
                            {
                                "$ref": "#/$defs/DestroyConversation"
                            },
                            {
                                "$ref": "#/$defs/SendRequest"
                            },
                            {
                                "$ref": "#/$defs/SendExternalRequest"
                            },
                            {
                                "$ref": "#/$defs/HandleExternalRequest"
                            }
                        ]
                    }
                }
            }
        },
        "Login": {
            "description": "Log users in and be available to execute actions",
            "type": "object",
            "required": [
                "userCount"
            ],
            "properties": {
                "userCount": {
                    "description": "How many users should login",
                    "$ref": "#/$defs/UserCount"
                },
                "duration": {
                    "description": "How long in milliseconds should the user be logged in. 0 means until the end",
                    "type": "integer"
                }
            }
        },
        "Reconnect": {
            "description": "Log users out and in after a configured delay",
            "type": "object",
            "required": [
                "userCount",
                "durationOffline"
            ],
            "properties": {
                "userCount": {
                    "description": "How many users should login",
                    "$ref": "#/$defs/UserCount"
                },
                "durationOffline": {
                    "description": "How long in milliseconds should the user be logged out, until a re-login",
                    "type": "integer"
                }
            }
        },
        "SendMessage": {
            "description": "Send random messages to conversations",
            "type": "object",
            "required": [
                "count"
            ],
            "properties": {
                "userCount": {
                    "description": "How many users should be send messages. Defaults to a fixed number of 1",
                    "$ref": "#/$defs/UserCount"
                },
                "count": {
                    "description": "How many messages should be sent at once. Each message will be sent by a random user",
                    "type": "integer"
                },
                "countGroups": {
                    "description": "To how many groups the message should be sent by each user. This will be used only if targets is empty or not informed. Random conversations will be picked to send the message to",
                    "type": "integer"
                },
                "targets": {
                    "description": "Group targets to send the message to. Valid values can be either 'One21' (pick a random Monkey and send a direct message) or predefined groups",
                    "type": "string"
                }
            }
        },
        "CreateConversation": {
            "description": "Create a conversation with random users",
            "type": "object",
            "required": [
                "userCount"
            ],
            "properties": {
                "userCount": {
                    "description": "How many users should be added to the group",
                    "$ref": "#/$defs/UserCount"
                },
                "protocol": {
                    "description": "Which protocol should the conversation have",
                    "enum": [
                        "MLS",
                        "PROTEUS"
                    ]
                },
                "teamOwner": {
                    "description": "Which team should the picked user belong to. For better performance, inform this field",
                    "type": "string"
                }
            }
        },
        "AddUsersToConversation": {
            "description": "Add a number of users to a random conversation. Predefined groups won't be targeted by this action",
            "type": "object",
            "required": [
                "userCount"
            ],
            "properties": {
                "countGroups": {
                    "description": "To how many groups should have users being added",
                    "type": "integer"
                },
                "userCount": {
                    "description": "How many users should be added to the group",
                    "$ref": "#/$defs/UserCount"
                }
            }
        },
        "LeaveConversation": {
            "description": "A random user will leave the group. The creator of the group will never leave",
            "type": "object",
            "required": [
                "userCount"
            ],
            "properties": {
                "countGroups": {
                    "description": "To how many groups should have users leaving",
                    "type": "integer"
                },
                "userCount": {
                    "description": "How many users should leave to the group. The creator will never leave the group",
                    "$ref": "#/$defs/UserCount"
                }
            }
        },
        "DestroyConversation": {
            "description": "Destroy a team conversation. If it is not a team conversation, it won't work",
            "type": "object",
            "required": [
                "count"
            ],
            "properties": {
                "count": {
                    "description": "How many conversations should be destroyed. Only works for multi-teams conversations and pre-defined groups won't be part of it",
                    "type": "integer"
                }
            }
        },
        "SendRequest": {
            "description": "Picks a random user and send a connection request, which will be accepted or rejected after a preconfigured delay",
            "type": "object",
            "required": [
                "userCount",
                "targetUserCount",
                "originTeam",
                "targetTeam"
            ],
            "properties": {
                "userCount": {
                    "description": "How many users should send requests",
                    "$ref": "#/$defs/UserCount"
                },
                "targetUserCount": {
                    "description": "How many users of the target team should receive requests",
                    "$ref": "#/$defs/UserCount"
                },
                "originTeam": {
                    "description": "Users from which team should the requests originate",
                    "type": "string"
                },
                "targetTeam": {
                    "description": "Users from which team should be targeted",
                    "type": "string"
                },
                "delayResponse": {
                    "description": "How long until the request is answered. 0 means immediately",
                    "type": "integer"
                },
                "shouldAccept": {
                    "description": "Should the request be accepted? Defaults to true",
                    "type": "boolean"
                }
            }
        },
        "SendExternalRequest": {
            "description": "Picks a random user and send a connection request to an user not on the scope of the monkeys",
            "type": "object",
            "required": [
                "userCount",
                "originTeam",
                "targetTeam"
            ],
            "properties": {
                "userCount": {
                    "description": "How many users should send requests",
                    "$ref": "#/$defs/UserCount"
                },
                "originTeam": {
                    "description": "Users from which team should the requests originate",
                    "type": "string"
                },
                "targetTeam": {
                    "description": "Users from which team should be targeted",
                    "type": "string"
                }
            }
        },
        "HandleExternalRequest": {
            "description": "Searches for a monkey with pending connection requests and accepts or rejects it. At this moment it considers also connection requests from other monkeys",
            "type": "object",
            "required": [
                "userCount",
                "shouldAccept"
            ],
            "properties": {
                "userCount": {
                    "description": "How many users should handle requests",
                    "$ref": "#/$defs/UserCount"
                },
                "shouldAccept": {
                    "description": "If the request should be accepted or not",
                    "type": "boolean"
                },
                "greetMessage": {
                    "description": "If accepted, this custom message will be sent to the other user. If not informed a random message will be sent.",
                    "type": "string"
                }
            }
        },
        "FileStorage": {
            "description": "File storage of events. The content will be one event per line as a json object",
            "type": "object",
            "required": [
                "eventsLocation",
                "teamsLocation"
            ],
            "properties": {
                "eventsLocation": {
                    "description": "The location where the file with the events should be saved",
                    "type": "string"
                },
                "teamsLocation": {
                    "description": "The location where the file with the backends' config should be saved",
                    "type": "string"
                }
            }
        },
        "PostgresStorage": {
            "description": "Database storage. It is useful when running multiple instances of the app",
            "type": "object",
            "required": [
                "host",
                "dbName",
                "username",
                "password"
            ],
            "properties": {
                "host": {
                    "description": "Host of the postgres database",
                    "type": "string"
                },
                "dbName": {
                    "description": "Database name",
                    "type": "string"
                },
                "username": {
                    "description": "Username of the postgres database",
                    "type": "string"
                },
                "password": {
                    "description": "Password of the postgres database",
                    "type": "string"
                }
            }
        }
    }
}
