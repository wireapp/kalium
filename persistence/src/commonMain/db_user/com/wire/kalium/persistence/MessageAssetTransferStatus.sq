import com.wire.kalium.persistence.dao.QualifiedIDEntity;
import com.wire.kalium.persistence.dao.asset.AssetTransferStatusEntity;

CREATE TABLE MessageAssetTransferStatus (
    message_id TEXT NOT NULL,
    conversation_id TEXT AS QualifiedIDEntity NOT NULL,
    transfer_status TEXT AS AssetTransferStatusEntity NOT NULL DEFAULT 'NOT_DOWNLOADED',
    FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (message_id, conversation_id)
);

deleteAssetStatus:
DELETE FROM MessageAssetTransferStatus WHERE message_id = ? AND conversation_id = ?;

upsertMessageAssetStatus:
INSERT INTO MessageAssetTransferStatus(message_id, conversation_id, transfer_status)
VALUES( ?, ?, ?)
ON CONFLICT(message_id, conversation_id) DO UPDATE SET
transfer_status = excluded.transfer_status;

selectConversationAssetStatus:
SELECT * FROM MessageAssetTransferStatus
WHERE conversation_id = :conversationId;

selectMessageAssetStatus:
SELECT transfer_status FROM MessageAssetTransferStatus
WHERE conversation_id = :conversationId AND message_id = :messageId;

resetAssetTransferStatus:
DELETE FROM MessageAssetTransferStatus
WHERE transfer_status = 'UPLOAD_IN_PROGRESS' OR transfer_status = "DOWNLOAD_IN_PROGRESS";
