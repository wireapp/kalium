import com.wire.kalium.persistence.dao.QualifiedIDEntity;
import com.wire.kalium.persistence.dao.receipt.ReceiptTypeEntity;

CREATE TABLE Receipt (
    message_id TEXT NOT NULL,
    conversation_id TEXT AS QualifiedIDEntity NOT NULL,
    user_id TEXT AS QualifiedIDEntity NOT NULL,
    type TEXT AS ReceiptTypeEntity NOT NULL,
    date TEXT NOT NULL,
    FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES User(qualified_id) ON DELETE CASCADE,
    PRIMARY KEY (message_id, conversation_id, user_id, type)
);

-- TODO: Cast to proper types when/if SQLDelight supports it:
insertReceipt:
WITH insertion(message_id, conversation_id, user_id, type, date) AS(
    VALUES (CAST(? AS TEXT), CAST(? AS TEXT), CAST(? AS TEXT), CAST(? AS TEXT), CAST(? AS TEXT))
)
INSERT OR IGNORE INTO Receipt(message_id, conversation_id, user_id, type, date)
SELECT
    insertion.message_id,
    insertion.conversation_id,
    insertion.user_id,
    insertion.type,
    insertion.date
FROM insertion
WHERE EXISTS (
    SELECT 1 FROM Message
    WHERE
        Message.conversation_id = insertion.conversation_id AND
        Message.id = insertion.message_id
);

CREATE VIEW IF NOT EXISTS ReceiptDetails
AS SELECT
	Receipt.type,
	Receipt.date,
	Receipt.message_id AS messageId,
	Receipt.conversation_id AS conversationId,
	User.qualified_id AS userId,
	User.name AS userName,
	User.handle AS userHandle,
	User.preview_asset_id AS previewAssetId,
	User.user_type AS userType,
	User.deleted AS isUserDeleted,
	User.connection_status AS connectionStatus,
	User.user_availability_status AS userAvailabilityStatus,
	User.accent_id AS accentId
FROM
	Receipt
INNER JOIN User ON User.qualified_id = Receipt.user_id
ORDER BY User.name;

selectReceiptsByConversationIdAndMessageId:
SELECT *
FROM ReceiptDetails
    WHERE messageId = ?
	AND conversationId = ?
	AND type = ?;
