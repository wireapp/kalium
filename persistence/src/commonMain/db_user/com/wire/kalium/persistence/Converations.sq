import com.wire.kalium.persistence.dao.QualifiedIDEntity;
import com.wire.kalium.persistence.dao.ConversationEntity;
import kotlin.Boolean;

CREATE TABLE Conversation (
    qualified_id TEXT AS QualifiedIDEntity NOT NULL PRIMARY KEY,
    name TEXT,
    type TEXT AS ConversationEntity.Type NOT NULL,
    team_id TEXT,
    mls_group_id TEXT,
    mls_group_state TEXT AS ConversationEntity.GroupState NOT NULL,
    protocol TEXT AS ConversationEntity.Protocol NOT NULL,
    has_unnotified_messages INTEGER AS Boolean DEFAULT 0,
    last_notification_date TEXT
);

deleteAllConversations:
DELETE FROM Conversation;

deleteConversation:
DELETE FROM Conversation WHERE qualified_id = ?;

insertConversation:
INSERT INTO Conversation(qualified_id, name, type, team_id, mls_group_id, mls_group_state, protocol)
VALUES(?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(qualified_id) DO UPDATE SET
name = excluded.name,
type = excluded.type,
team_id = excluded.team_id,
mls_group_id = excluded.mls_group_id,
mls_group_state = excluded.mls_group_state,
protocol = excluded.protocol;

updateConversation:
UPDATE Conversation
SET name = ?, type = ?, team_id = ?
WHERE qualified_id = ?;

updateConversationGroupState:
UPDATE Conversation
SET mls_group_state = ?
WHERE mls_group_id = ?;

updateConversationNotificatiosStateAndDate:
UPDATE Conversation
SET last_notification_date = ?, has_unnotified_messages = ?
WHERE qualified_id = ?;

updateConversationNotificatiosState:
UPDATE Conversation
SET has_unnotified_messages = ?
WHERE qualified_id = ?;

selectAllConversations:
SELECT * FROM Conversation;

selectByQualifiedId:
SELECT * FROM Conversation WHERE qualified_id = ?;

selectByGroupId:
SELECT * FROM Conversation WHERE mls_group_id = ?;

selectConversationsWithNotification:
SELECT * FROM Conversation WHERE has_unnotified_messages != 0;
