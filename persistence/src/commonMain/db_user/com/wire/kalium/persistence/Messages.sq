import com.wire.kalium.persistence.dao.QualifiedIDEntity;
import com.wire.kalium.persistence.dao.conversation.ConversationEntity;
import com.wire.kalium.persistence.dao.message.MessageEntity.ContentType;
import com.wire.kalium.persistence.dao.message.MessageEntity.FederationType;
import com.wire.kalium.persistence.dao.message.MessageEntity.LegalHoldType;
import com.wire.kalium.persistence.dao.message.MessageEntity.MemberChangeType;
import com.wire.kalium.persistence.dao.message.MessageEntity;
import com.wire.kalium.persistence.dao.message.RecipientFailureTypeEntity;
import kotlin.Boolean;
import kotlin.Float;
import kotlin.Int;
import kotlin.String;
import kotlin.collections.List;
import kotlinx.datetime.Instant;

CREATE TABLE Message (
      id TEXT NOT NULL,
      content_type TEXT AS ContentType NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,
      creation_date INTEGER AS Instant NOT NULL,
      sender_user_id TEXT AS QualifiedIDEntity NOT NULL,
      sender_client_id TEXT,
      status TEXT AS MessageEntity.Status NOT NULL,
      last_edit_date INTEGER AS Instant,
      visibility TEXT AS MessageEntity.Visibility NOT NULL DEFAULT 'visible',
      expects_read_confirmation INTEGER AS Boolean NOT NULL DEFAULT(0),
      expire_after_millis INTEGER DEFAULT(NULL),
      self_deletion_end_date INTEGER AS Instant DEFAULT(NULL),

      FOREIGN KEY (conversation_id) REFERENCES Conversation(qualified_id) ON DELETE CASCADE,
      FOREIGN KEY (sender_user_id) REFERENCES User(qualified_id),
      PRIMARY KEY (id, conversation_id)
);

-- Allows optimized querying of messages sorting by date.
CREATE INDEX message_creation_date_index ON Message(creation_date);
CREATE INDEX message_content_type_index ON Message(content_type);
CREATE INDEX message_visibility_index ON Message(visibility);
CREATE INDEX message_sender_user_index ON Message(sender_user_id);
CREATE INDEX message_conversation_index ON Message(conversation_id);
CREATE INDEX message_status_index ON Message(status);
CREATE INDEX message_expire_time_index ON Message(expire_after_millis);
CREATE INDEX message_self_deletion_end_date ON Message(self_deletion_end_date);

CREATE TABLE MessageMention (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      start INTEGER AS Int NOT NULL,
      length INTEGER AS Int NOT NULL,
      user_id TEXT AS QualifiedIDEntity NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id, start) -- there should not be any overlapping mentions
);
CREATE INDEX message_mentioned_user_id_index ON MessageMention(user_id);

CREATE TABLE MessageTextContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      text_body TEXT,
      quoted_message_id TEXT,
      is_quote_verified INTEGER AS Boolean,
      is_quoting_self INTEGER AS Boolean NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);
CREATE INDEX message_text_content_quoted_id_index ON MessageTextContent(quoted_message_id) WHERE quoted_message_id IS NOT NULL;

CREATE TABLE MessageRestrictedAssetContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      asset_mime_type TEXT NOT NULL,
      asset_size INTEGER NOT NULL,
      asset_name TEXT NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageAssetContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      asset_size INTEGER NOT NULL,
      asset_name TEXT,
      asset_mime_type TEXT NOT NULL,

      -- remote data fields
      asset_otr_key BLOB NOT NULL,
      asset_sha256 BLOB NOT NULL,
      asset_id TEXT NOT NULL,
      asset_token TEXT,
      asset_domain TEXT,
      asset_encryption_algorithm TEXT,

      -- metadata fields
      asset_width INTEGER AS Int,
      asset_height INTEGER AS Int,
      asset_duration_ms INTEGER,
      asset_normalized_loudness BLOB,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageMemberChangeContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      member_change_list TEXT AS List<QualifiedIDEntity> NOT NULL,
      member_change_type TEXT AS MemberChangeType NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageFederationTerminatedContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      domain_list TEXT AS List<String> NOT NULL,
      federation_type TEXT AS FederationType NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageUnknownContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      unknown_type_name TEXT,
      unknown_encoded_data BLOB,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageFailedToDecryptContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      unknown_encoded_data BLOB,
      is_decryption_resolved INTEGER AS Boolean NOT NULL DEFAULT(0),

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageMissedCallContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      caller_id TEXT AS QualifiedIDEntity NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);
CREATE INDEX message_missed_call_caller_index ON MessageMissedCallContent(caller_id);

CREATE TABLE MessageConversationChangedContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      conversation_name TEXT NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageNewConversationReceiptModeContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      receipt_mode INTEGER AS Boolean  NOT NULL DEFAULT(0),

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageConversationReceiptModeChangedContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      receipt_mode INTEGER AS Boolean  NOT NULL DEFAULT(0),

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageConversationTimerChangedContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      message_timer INTEGER DEFAULT(NULL),

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageRecipientFailure (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      recipient_failure_list TEXT AS List<QualifiedIDEntity> NOT NULL, -- list of user ids that have failed to receive the message
      recipient_failure_type TEXT AS RecipientFailureTypeEntity NOT NULL, -- failure type, indicating the reason why this users have failed to receive the message

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id, recipient_failure_type)
);

CREATE TABLE MessageConversationProtocolChangedContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,
      protocol TEXT AS ConversationEntity.Protocol NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageConversationProtocolChangedDuringACallContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageConversationLocationContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,
      latitude REAL AS Float NOT NULL,
      longitude REAL AS Float NOT NULL,
      name TEXT,
      zoom INTEGER AS Int,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageLegalHoldContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      legal_hold_member_list TEXT AS List<QualifiedIDEntity> NOT NULL,
      legal_hold_type TEXT AS LegalHoldType NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

needsToBeNotified:
WITH targetMessage(isSelfMessage, isMentioningSelfUser, isQuotingSelfUser, mutedStatus) AS (
SELECT isSelfMessage,
 IFNULL( isMentioningSelfUser, 0 ) == 1 AS  isMentioningSelfUser,
	IFNULL( isQuotingSelfUser, 0 ) == 1 AS isQuotingSelfUser,
	mutedStatus  FROM MessagePreview WHERE id = ? AND conversationId = ?)
SELECT (
    CASE mutedStatus
    WHEN 'ALL_MUTED' THEN 0
    WHEN 'ALL_ALLOWED' THEN (
        SELECT CASE (SELECT User.user_availability_status FROM SelfUser LEFT JOIN User ON SelfUser.id = User.qualified_id)
            WHEN 'BUSY' THEN (SELECT
                isSelfMessage == 0
                AND isMentioningSelfUser == 1
                OR  isQuotingSelfUser == 1
                FROM targetMessage)
            WHEN 'AWAY' THEN 0
            WHEN 'NONE' THEN  (SELECT isSelfMessage == 0 FROM targetMessage)
            WHEN 'AVAILABLE' THEN (SELECT isSelfMessage == 0 FROM targetMessage)
            ELSE (SELECT isSelfMessage == 0 FROM targetMessage)  END
        )
    WHEN 'ONLY_MENTIONS_AND_REPLIES_ALLOWED' THEN (
        SELECT CASE (SELECT User.user_availability_status FROM SelfUser LEFT JOIN User ON SelfUser.id = User.qualified_id)
            WHEN 'AWAY' THEN 0
            ELSE  (SELECT isSelfMessage == 0
                  AND isMentioningSelfUser == 1
                  OR isQuotingSelfUser== 1
									FROM targetMessage)
            END
        )
    ELSE (SELECT isSelfMessage == 0 FROM targetMessage) END)
     AS needsToBeNotified FROM targetMessage;

getUnreadMessagesCount:
SELECT
    conversation_id,
    COUNT()
FROM Message
JOIN SelfUser
JOIN Conversation ON Conversation.qualified_id = Message.conversation_id
WHERE Message.creation_date > Conversation.last_read_date
AND Message.sender_user_id != SelfUser.id
AND visibility = 'VISIBLE'
AND content_type IN ('TEXT', 'ASSET', 'KNOCK', 'MISSED_CALL')
GROUP BY conversation_id;

deleteAllMessages:
DELETE FROM Message;

deleteMessage:
DELETE FROM Message WHERE id = ? AND conversation_id = ?;

deleteMessageMentions:
DELETE FROM MessageMention WHERE  message_id = ? AND conversation_id = ?;

deleteMessageById:
DELETE FROM Message WHERE id = ?;

markMessageAsDeleted {
   UPDATE Message
   SET visibility = 'DELETED'
   WHERE id = :message_id AND conversation_id = :conversation_id;

   DELETE FROM MessageTextContent WHERE message_id = :message_id AND conversation_id = :conversation_id;
   DELETE FROM MessageAssetContent WHERE message_id = :message_id AND conversation_id = :conversation_id;
   DELETE FROM MessageMemberChangeContent WHERE message_id = :message_id AND conversation_id = :conversation_id;
   DELETE FROM MessageUnknownContent WHERE message_id = :message_id AND conversation_id = :conversation_id;
   DELETE FROM MessageRestrictedAssetContent WHERE message_id = :message_id AND conversation_id = :conversation_id;
   DELETE FROM MessageConversationLocationContent WHERE message_id = :message_id AND conversation_id = :conversation_id;
   -- deleted messages will not have a quote 100%
   -- TODO: why inserting a NULL here? Shouldn't we just not insert anything?
   INSERT INTO MessageTextContent(message_id, conversation_id, text_body, is_quoting_self) VALUES(:message_id, :conversation_id, NULL, 0);
}

markMessageAsEdited:
UPDATE Message
SET last_edit_date = ?
WHERE id = ? AND conversation_id = ?;

getMessageSenderId:
SELECT sender_user_id FROM Message WHERE id = ? AND conversation_id = ?;

insertOrIgnoreMessage:
INSERT OR IGNORE INTO Message(id, content_type, conversation_id, creation_date, sender_user_id, sender_client_id, status, last_edit_date, visibility, expects_read_confirmation, expire_after_millis, self_deletion_end_date)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

insertMessage:
INSERT INTO Message(id, content_type, conversation_id, creation_date, sender_user_id, sender_client_id, status, last_edit_date, visibility, expects_read_confirmation, expire_after_millis, self_deletion_end_date)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

insertOrIgnoreBulkSystemMessage:
INSERT OR IGNORE INTO Message(id, content_type, conversation_id, creation_date, sender_user_id, sender_client_id, status, visibility, expects_read_confirmation)
SELECT ?, ?, qualified_id, ?, ?, ?, ?, ?, ? FROM Conversation WHERE type IN ('ONE_ON_ONE', 'GROUP');
-- TODO: check if conversation type have an index

insertMessageMention:
INSERT OR IGNORE INTO MessageMention(message_id, conversation_id, start, length, user_id)
VALUES (?, ?, ?, ?, ?);

insertMessageTextContent:
INSERT OR IGNORE INTO MessageTextContent(message_id, conversation_id, text_body, quoted_message_id, is_quote_verified, is_quoting_self)
VALUES(:message_id, :conversation_id, :text_body, :quoted_message_id, :is_quote_verified,
CASE WHEN
                :quoted_message_id IS NULL
                    THEN 0
                    ELSE (
                        IFNULL(
                        (SELECT (Message.sender_user_id == SelfUser.id)
                            FROM Message
                            LEFT JOIN SelfUser
                            WHERE
                                Message.id = :quoted_message_id AND
                                conversation_id = :conversation_id),
                        0 ))END);

insertMessageRestrictedAssetContent:
INSERT OR IGNORE INTO MessageRestrictedAssetContent(message_id, conversation_id, asset_mime_type,asset_size,asset_name)
VALUES(?, ?, ?,?,?);

insertMessageAssetContent:
INSERT OR IGNORE INTO MessageAssetContent(message_id, conversation_id, asset_size, asset_name, asset_mime_type, asset_otr_key, asset_sha256, asset_id, asset_token, asset_domain, asset_encryption_algorithm, asset_width, asset_height, asset_duration_ms, asset_normalized_loudness)
VALUES(?, ?, ?, ?, ?, ? ,?, ?, ?, ?, ?, ?, ?,  ?, ?);

insertMemberChangeMessage:
INSERT OR IGNORE INTO MessageMemberChangeContent(message_id, conversation_id, member_change_list, member_change_type)
VALUES(?, ?, ?, ?);

insertFederationTerminatedMessage:
INSERT OR IGNORE INTO MessageFederationTerminatedContent(message_id, conversation_id, domain_list, federation_type)
VALUES(?, ?, ?, ?);

insertMessageUnknownContent:
INSERT OR IGNORE INTO MessageUnknownContent(message_id, conversation_id, unknown_type_name, unknown_encoded_data)
VALUES(?, ?, ?, ?);

insertFailedDecryptionMessageContent:
INSERT OR IGNORE INTO MessageFailedToDecryptContent(message_id, conversation_id, unknown_encoded_data)
VALUES(?, ?, ?);

insertMissedCallMessage:
INSERT OR IGNORE INTO MessageMissedCallContent(message_id, conversation_id, caller_id)
VALUES(?, ?, ?);

insertConversationRenamedMessage:
INSERT OR IGNORE INTO MessageConversationChangedContent(message_id, conversation_id, conversation_name)
VALUES(?, ?, ?);

insertNewConversationReceiptMode:
INSERT OR IGNORE INTO MessageNewConversationReceiptModeContent(message_id, conversation_id, receipt_mode)
VALUES(?, ?, ?);

insertConversationReceiptModeChanged:
INSERT OR IGNORE INTO MessageConversationReceiptModeChangedContent(message_id, conversation_id, receipt_mode)
VALUES(?, ?, ?);

insertConversationMessageTimerChanged:
INSERT OR IGNORE INTO MessageConversationTimerChangedContent(message_id, conversation_id, message_timer)
VALUES(?, ?, ?);

insertConversationProtocolChanged:
INSERT OR IGNORE INTO MessageConversationProtocolChangedContent(message_id, conversation_id, protocol)
VALUES(?, ?, ?);

insertConversationProtocolChangedDuringACall:
INSERT OR IGNORE INTO MessageConversationProtocolChangedDuringACallContent(message_id, conversation_id)
VALUES(?, ?);

insertLocationMessageContent:
INSERT OR IGNORE INTO MessageConversationLocationContent(message_id, conversation_id, latitude, longitude, name, zoom)
VALUES(?, ?, ?, ?, ?, ?);

insertLegalHoldMessage:
INSERT OR IGNORE INTO MessageLegalHoldContent(message_id, conversation_id, legal_hold_member_list, legal_hold_type)
VALUES(?, ?, ?, ?);

updateMessageStatus:
UPDATE Message
SET status = ?
WHERE id = ? AND conversation_id = ?;

updateQuotedMessageId:
UPDATE MessageTextContent
SET quoted_message_id = ?
WHERE quoted_message_id = ? AND conversation_id = ?;

selectMessageVisibility:
SELECT visibility FROM Message WHERE id = ? AND conversation_id = ?;

updateAssetContent {
    UPDATE OR ROLLBACK Message
    SET visibility = :visibility
    WHERE id = :messageId AND conversation_id = :conversationId AND visibility IS NOT 'DELETED';

    UPDATE OR ROLLBACK MessageAssetContent
    SET asset_id = :assetId, asset_domain = :assetDomain, asset_otr_key = :assetOtrKey, asset_sha256 = :assetSha256, asset_name = :assetName, asset_size = :assetSize, asset_mime_type = :assetMimeType, asset_token = :assetToken, asset_encryption_algorithm = :assetEncryptionAlgorithm
    WHERE message_id = :messageId AND conversation_id = :conversationId;
}

updateMessageTextContent:
UPDATE MessageTextContent
SET text_body = ?
WHERE message_id = ? AND conversation_id = ?;

updateMessageLegalHoldContentMembers:
UPDATE MessageLegalHoldContent
SET legal_hold_member_list = :legal_hold_member_list
WHERE message_id = :message_id AND conversation_id = :conversation_id;

updateMessageId:
UPDATE Message
SET id = :newId
WHERE id = :oldId AND conversation_id = :conversationId;

selectById:
SELECT * FROM MessageDetailsView WHERE id = ? AND conversationId = ?;

countByConversationIdAndVisibility:
SELECT count(*) FROM Message WHERE conversation_id = ? AND visibility IN ? ORDER BY creation_date DESC;

selectByConversationIdAndVisibility:
SELECT * FROM MessageDetailsView WHERE conversationId = :conversationId AND visibility IN :visibility ORDER BY date DESC LIMIT :limit OFFSET :offset;

selectLastMessagesByConversationIds:
SELECT MessageDetailsView.* FROM MessageDetailsView
JOIN (
    SELECT conversationId, MAX(date) AS latest_date
    FROM MessageDetailsView
    WHERE conversationId IN :conversationIds
    GROUP BY conversationId
) AS lastMessage
ON MessageDetailsView.conversationId = lastMessage.conversationId AND MessageDetailsView.date = lastMessage.latest_date;

selectMessagesByConversationIdAndVisibilityAfterDate:
SELECT * FROM MessageDetailsView WHERE MessageDetailsView.conversationId = ? AND visibility IN ? AND date > ? ORDER BY date DESC;

selectMessagesFromUserByStatus:
SELECT * FROM MessageDetailsView WHERE senderUserId = ? AND status = ?;

selectByConversationIdAndSenderIdAndTimeAndType:
SELECT * FROM MessageDetailsView WHERE conversationId = ? AND senderUserId = ? AND date = ? AND contentType = ?;

selectByConversationIdAndSenderIdAndType:
SELECT * FROM MessageDetailsView WHERE conversationId = ? AND senderUserId = ? AND contentType = ?;

selectPendingMessagesIdsByConversationIdAndVisibilityAfterDate:
SELECT Message.id
FROM Message
LEFT JOIN SelfUser
LEFT JOIN Conversation ON Message.conversation_id = Conversation.qualified_id
WHERE
    Message.conversation_id = ?
    AND Message.visibility IN ?
    AND (Message.expects_read_confirmation = 1)
    AND Message.creation_date > Conversation.last_read_date
    AND (Message.sender_user_id != SelfUser.id)
ORDER BY
    Message.creation_date DESC;

markMessagesAsDecryptionResolved:
UPDATE MessageFailedToDecryptContent
SET is_decryption_resolved = 1
WHERE message_id IN (
            SELECT id FROM MessageDetailsView
            WHERE senderUserId = ?
            AND senderClientId = ?
            AND contentType = 'FAILED_DECRYPTION'
            );

promoteMessageToSentUpdatingServerTime {
UPDATE Message
SET
    creation_date = CASE WHEN :server_creation_date IS NULL THEN creation_date ELSE :server_creation_date END,
    status = 'SENT'
WHERE id = :message_id AND conversation_id = :conversation_id;

UPDATE OR IGNORE Message
SET creation_date = creation_date + :delivery_duration
WHERE conversation_id = :conversation_id AND status = 'PENDING';
}

selectPendingEphemeralMessages:
SELECT * FROM MessageDetailsView
WHERE expireAfterMillis NOT NULL
AND visibility = "VISIBLE"
AND (
    selfDeletionEndDate IS NULL
    OR selfDeletionEndDate > STRFTIME('%s', 'now') * 1000 -- Checks if message end date is higher than current time in millis
);

selectAlreadyEndedEphemeralMessages:
SELECT * FROM MessageDetailsView
WHERE expireAfterMillis NOT NULL
AND selfDeletionEndDate NOT NULL
AND visibility = "VISIBLE"
AND selfDeletionEndDate <= STRFTIME('%s', 'now') * 1000; -- Checks if message end date is lower than current time in millis

markSelfDeletionEndDate:
UPDATE Message
SET self_deletion_end_date = ?
WHERE conversation_id = ? AND id = ?;

insertMessageRecipientsFailure:
INSERT OR IGNORE INTO MessageRecipientFailure(message_id, conversation_id, recipient_failure_list, recipient_failure_type)
VALUES(?, ?, ?, ?);

moveMessages:
UPDATE OR REPLACE Message
SET conversation_id = :to
WHERE conversation_id = :from;

selectConversationMessagesFromSearch:
SELECT * FROM MessageDetailsView
WHERE text LIKE ('%' || :searchQuery || '%')
AND conversationId = :conversationId
AND contentType = 'TEXT'
AND expireAfterMillis IS NULL
ORDER BY date DESC
LIMIT :limit
OFFSET :offset;

countBySearchedMessageAndConversationId:
SELECT COUNT(*) FROM MessageDetailsView
WHERE text LIKE ('%' || :searchQuery || '%')
AND conversationId = :conversationId
AND contentType = 'TEXT'
AND expireAfterMillis IS NULL
ORDER BY date DESC;

selectSearchedConversationMessagePosition:
SELECT COUNT(*) FROM Message
WHERE conversation_id = :conversationId
AND creation_date >= (SELECT creation_date FROM Message WHERE id = :messageId LIMIT 1)
AND expire_after_millis IS NULL
ORDER BY creation_date DESC;
