import com.wire.kalium.persistence.dao.QualifiedIDEntity;
import com.wire.kalium.persistence.dao.message.MessageEntity.ContentType;
import com.wire.kalium.persistence.dao.message.MessageEntity.MemberChangeType;
import com.wire.kalium.persistence.dao.message.MessageEntity;
import kotlin.Boolean;
import kotlin.Int;
import kotlin.collections.List;
import kotlinx.datetime.Instant;

CREATE TABLE Message (
      id TEXT NOT NULL,
      content_type TEXT AS ContentType NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,
      creation_date INTEGER AS Instant NOT NULL,
      sender_user_id TEXT AS QualifiedIDEntity NOT NULL,
      sender_client_id TEXT,
      status TEXT AS MessageEntity.Status NOT NULL,
      last_edit_date INTEGER AS Instant,
      visibility TEXT AS MessageEntity.Visibility NOT NULL DEFAULT 'visible',
      expects_read_confirmation INTEGER AS Boolean NOT NULL DEFAULT(0),

      FOREIGN KEY (conversation_id) REFERENCES Conversation(qualified_id) ON DELETE CASCADE,
      FOREIGN KEY (sender_user_id) REFERENCES User(qualified_id),
      PRIMARY KEY (id, conversation_id)
);

-- Allows optimized querying of messages sorting by date.
CREATE INDEX message_creation_date_index ON Message(creation_date);
CREATE INDEX message_content_type_index ON Message(content_type);
CREATE INDEX message_visibility_index ON Message(visibility);
CREATE INDEX message_sender_user_index ON Message(sender_user_id);

CREATE TABLE MessageMention (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      start INTEGER AS Int NOT NULL,
      length INTEGER AS Int NOT NULL,
      user_id TEXT AS QualifiedIDEntity NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id, start) -- there should not be any overlapping mentions
);
CREATE INDEX message_mentioned_user_id_index ON MessageMention(user_id);

CREATE TABLE MessageTextContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      text_body TEXT,
      quoted_message_id TEXT,
      is_quote_verified INTEGER AS Boolean,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);
CREATE INDEX message_text_content_quoted_id_index ON MessageTextContent(quoted_message_id) WHERE quoted_message_id IS NOT NULL;

CREATE TABLE MessageRestrictedAssetContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      asset_mime_type TEXT NOT NULL,
      asset_size INTEGER NOT NULL,
      asset_name TEXT NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageAssetContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      asset_size INTEGER NOT NULL,
      asset_name TEXT,
      asset_mime_type TEXT NOT NULL,
      asset_upload_status TEXT AS MessageEntity.UploadStatus,
      asset_download_status TEXT AS MessageEntity.DownloadStatus,

      -- remote data fields
      asset_otr_key BLOB NOT NULL,
      asset_sha256 BLOB NOT NULL,
      asset_id TEXT NOT NULL,
      asset_token TEXT,
      asset_domain TEXT,
      asset_encryption_algorithm TEXT,

      -- metadata fields
      asset_width INTEGER AS Int,
      asset_height INTEGER AS Int,
      asset_duration_ms INTEGER,
      asset_normalized_loudness BLOB,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageMemberChangeContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      member_change_list TEXT AS List<QualifiedIDEntity> NOT NULL,
      member_change_type TEXT AS MemberChangeType NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageUnknownContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      unknown_type_name TEXT,
      unknown_encoded_data BLOB,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageFailedToDecryptContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      unknown_encoded_data BLOB,
      is_decryption_resolved INTEGER AS Boolean NOT NULL DEFAULT(0),

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE TABLE MessageMissedCallContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      caller_id TEXT AS QualifiedIDEntity NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);
CREATE INDEX message_missed_call_caller_index ON MessageMissedCallContent(caller_id);

CREATE TABLE MessageConversationChangedContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      conversation_name TEXT NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

CREATE VIEW IF NOT EXISTS MessageQuoteDetails
AS SELECT
    MessageTextContent.message_id AS messageId,
    MessageTextContent.conversation_id AS conversationId,
    MessageTextContent.quoted_message_id AS quotedMessageId,
    MessageTextContent.is_quote_verified AS isQuoteVerified,
    QuotedSender.qualified_id AS quotedSenderId,
    (qualified_id == SelfUser.id) AS isQuotingSelfUser,
    QuotedSender.name AS quotedSenderName,
    QuotedMessage.creation_date quotedMessageCreationInstant,
    QuotedMessage.last_edit_date AS quotedMessageEditInstant,
    QuotedMessage.visibility AS quotedMessageVisibility,
    QuotedMessage.content_type AS quotedMessageContentType,
    QuotedTextContent.text_body AS quotedTextBody,
    QuotedAssetContent.asset_mime_type AS quotedAssetMimeType,
    QuotedAssetContent.asset_name AS quotedAssetName
FROM MessageTextContent
LEFT JOIN Message AS QuotedMessage ON QuotedMessage.id = MessageTextContent.quoted_message_id AND QuotedMessage.conversation_id = MessageTextContent.conversation_id
INNER JOIN User AS QuotedSender ON QuotedMessage.sender_user_id = QuotedSender.qualified_id
INNER JOIN SelfUser AS SelfUser
LEFT JOIN MessageTextContent AS QuotedTextContent ON QuotedTextContent.message_id = QuotedMessage.id AND QuotedMessage.conversation_id = MessageTextContent.conversation_id
LEFT JOIN MessageAssetContent AS QuotedAssetContent ON QuotedAssetContent.message_id = QuotedMessage.id AND QuotedMessage.conversation_id = MessageTextContent.conversation_id;

CREATE VIEW IF NOT EXISTS MessageDetailsView
AS SELECT
Message.id AS id,
Message.conversation_id AS conversationId,
Message.content_type AS contentType,
Message.creation_date AS date,
Message.sender_user_id AS senderUserId,
Message.sender_client_id AS senderClientId,
Message.status AS status,
Message.last_edit_date AS lastEditTimestamp,
Message.visibility AS visibility,
Message.expects_read_confirmation AS expectsReadConfirmation,
User.name AS senderName,
User.handle AS senderHandle,
User.email AS senderEmail,
User.phone AS senderPhone,
User.accent_id AS senderAccentId,
User.team AS senderTeamId,
User.connection_status AS senderConnectionStatus,
User.preview_asset_id AS senderPreviewAssetId,
User.complete_asset_id AS senderCompleteAssetId,
User.user_availability_status AS senderAvailabilityStatus,
User.user_type AS senderUserType,
User.bot_service AS senderBotService,
User.deleted AS senderIsDeleted,
(Message.sender_user_id == SelfUser.id) AS isSelfMessage,
TextContent.text_body AS text,
AssetContent.asset_size AS assetSize,
AssetContent.asset_name AS assetName,
AssetContent.asset_mime_type AS assetMimeType,
AssetContent.asset_upload_status AS assetUploadStatus,
AssetContent.asset_download_status AS assetDownloadStatus,
AssetContent.asset_otr_key AS assetOtrKey,
AssetContent.asset_sha256 AS assetSha256,
AssetContent.asset_id AS assetId,
AssetContent.asset_token AS assetToken,
AssetContent.asset_domain AS assetDomain,
AssetContent.asset_encryption_algorithm AS assetEncryptionAlgorithm,
AssetContent.asset_width AS assetWidth,
AssetContent.asset_height AS assetHeight,
AssetContent.asset_duration_ms AS assetDuration,
AssetContent.asset_normalized_loudness AS assetNormalizedLoudness,
MissedCallContent.caller_id AS callerId,
MemberChangeContent.member_change_list AS memberChangeList,
MemberChangeContent.member_change_type AS memberChangeType,
UnknownContent.unknown_type_name AS unknownContentTypeName,
UnknownContent.unknown_encoded_data AS unknownContentData,
RestrictedAssetContent.asset_mime_type AS restrictedAssetMimeType,
RestrictedAssetContent.asset_size AS restrictedAssetSize,
RestrictedAssetContent.asset_name AS restrictedAssetName,
FailedToDecryptContent.unknown_encoded_data AS failedToDecryptData,
FailedToDecryptContent.is_decryption_resolved AS isDecryptionResolved,
ConversationNameChangedContent.conversation_name AS conversationName,
'{' || IFNULL(
    (SELECT GROUP_CONCAT('"' || emoji || '":' || count)
    FROM (
        SELECT COUNT(*) count, Reaction.emoji emoji
        FROM Reaction
        WHERE Reaction.message_id = Message.id
        AND Reaction.conversation_id = Message.conversation_id
        GROUP BY Reaction.emoji
    )),
    '')
|| '}' AS allReactionsJson,
IFNULL(
    (SELECT '[' || GROUP_CONCAT('"' || Reaction.emoji || '"') || ']'
    FROM Reaction
    WHERE Reaction.message_id = Message.id
        AND Reaction.conversation_id = Message.conversation_id
        AND Reaction.sender_id = SelfUser.id
    ),
    '[]'
) AS selfReactionsJson,
IFNULL(
    (SELECT '[' || GROUP_CONCAT(
        '{"start":' || start || ', "length":' || length ||
        ', "userId":{"value":"' || replace(substr(user_id, 0, instr(user_id, '@')), '@', '') || '"' ||
        ',"domain":"' || replace(substr(user_id, instr(user_id, '@')+1, length(user_id)), '@', '') || '"' ||
        '}' || '}') || ']'
    FROM MessageMention
    WHERE MessageMention.message_id = Message.id
        AND MessageMention.conversation_id = Message.conversation_id
    ),
    '[]'
) AS mentions,
QuotedMessage.quotedMessageId AS quotedMessageId,
QuotedMessage.quotedSenderId AS quotedSenderId,
QuotedMessage.isQuotingSelfUser AS isQuotingSelfUser,
QuotedMessage.isQuoteVerified AS isQuoteVerified,
QuotedMessage.quotedSenderName AS quotedSenderName,
QuotedMessage.quotedMessageCreationInstant AS quotedMessageDateTime,
QuotedMessage.quotedMessageEditInstant AS quotedMessageEditTimestamp,
QuotedMessage.quotedMessageVisibility AS quotedMessageVisibility,
QuotedMessage.quotedMessageContentType AS quotedMessageContentType,
QuotedMessage.quotedTextBody AS quotedTextBody,
QuotedMessage.quotedAssetMimeType AS quotedAssetMimeType,
QuotedMessage.quotedAssetName AS quotedAssetName
FROM Message
LEFT JOIN User ON Message.sender_user_id = User.qualified_id
LEFT JOIN MessageTextContent AS TextContent ON Message.id = TextContent.message_id AND Message.conversation_id = TextContent.conversation_id
LEFT JOIN MessageAssetContent AS AssetContent ON Message.id = AssetContent.message_id AND Message.conversation_id = AssetContent.conversation_id
LEFT JOIN MessageMissedCallContent AS MissedCallContent ON Message.id = MissedCallContent.message_id AND Message.conversation_id = MissedCallContent.conversation_id
LEFT JOIN MessageMemberChangeContent AS MemberChangeContent ON Message.id = MemberChangeContent.message_id AND Message.conversation_id = MemberChangeContent.conversation_id
LEFT JOIN MessageUnknownContent AS UnknownContent ON Message.id = UnknownContent.message_id AND Message.conversation_id = UnknownContent.conversation_id
LEFT JOIN MessageRestrictedAssetContent AS RestrictedAssetContent ON Message.id = RestrictedAssetContent.message_id AND RestrictedAssetContent.conversation_id = RestrictedAssetContent.conversation_id
LEFT JOIN MessageFailedToDecryptContent AS FailedToDecryptContent ON Message.id = FailedToDecryptContent.message_id AND Message.conversation_id = FailedToDecryptContent.conversation_id
LEFT JOIN MessageConversationChangedContent AS ConversationNameChangedContent ON Message.id = ConversationNameChangedContent.message_id AND Message.conversation_id = ConversationNameChangedContent.conversation_id
LEFT JOIN MessageQuoteDetails AS QuotedMessage ON Message.id = QuotedMessage.messageId AND Message.conversation_id = QuotedMessage.conversationId
LEFT JOIN SelfUser;
-- TODO: Remove IFNULL functions above if we can force SQLDelight to not unpack as notnull


CREATE VIEW IF NOT EXISTS MessagePreview
AS SELECT
    Message.id AS id,
    Message.conversation_id AS conversationId,
    Message.content_type AS contentType,
    Message.creation_date AS date,
    Message.visibility AS visibility,
    User.name AS senderName,
    User.connection_status AS senderConnectionStatus,
    User.deleted AS senderIsDeleted,
    SelfUser.id AS selfUserId,
    (Message.sender_user_id == SelfUser.id) AS isSelfMessage,
    MemberChangeContent.member_change_list AS memberChangeList,
    MemberChangeContent.member_change_type AS memberChangeType,
    ConversationNameChangedContent.conversation_name AS updateConversationName,
    Conversation.name AS conversationName,
    (Mention.user_id IS NOT NULL) AS isMentioningSelfUser,
    QuotedMessage.isQuotingSelfUser AS isQuotingSelfUser,
    TextContent.text_body AS text,
    AssetContent.asset_mime_type AS assetMimeType,
    (Message.creation_date > Conversation.last_read_date) AS isUnread,
    IFNULL((Message.creation_date > IFNULL(Conversation.last_notified_date, 0)), FALSE) AS shouldNotify,
    Conversation.muted_status AS mutedStatus,
    Conversation.type AS conversationType
FROM Message
LEFT JOIN SelfUser
LEFT JOIN User ON Message.sender_user_id = User.qualified_id
LEFT JOIN MessageQuoteDetails AS QuotedMessage ON Message.id = QuotedMessage.messageId AND Message.conversation_id = QuotedMessage.conversationId
LEFT JOIN Conversation AS Conversation ON Message.conversation_id == Conversation.qualified_id
LEFT JOIN MessageMemberChangeContent AS MemberChangeContent ON Message.id = MemberChangeContent.message_id AND Message.conversation_id = MemberChangeContent.conversation_id
LEFT JOIN MessageMention AS Mention ON Message.id == Mention.message_id AND SelfUser.id == Mention.user_id
LEFT JOIN MessageConversationChangedContent AS ConversationNameChangedContent ON Message.id = ConversationNameChangedContent.message_id AND Message.conversation_id = ConversationNameChangedContent.conversation_id
LEFT JOIN MessageAssetContent AS AssetContent ON Message.id = AssetContent.message_id AND Message.conversation_id = AssetContent.conversation_id
LEFT JOIN MessageTextContent AS TextContent ON Message.id = TextContent.message_id AND Message.conversation_id = TextContent.conversation_id;

needsToBeNotified:
WITH targetMessage(isSelfMessage, isMentioningSelfUser, isQuotingSelfUser, mutedStatus) AS (
SELECT isSelfMessage,
 IFNULL( isMentioningSelfUser, 0 ) == 1 AS  isMentioningSelfUser,
	IFNULL( isQuotingSelfUser, 0 ) == 1 AS isQuotingSelfUser,
	mutedStatus  FROM MessagePreview WHERE id = ? AND conversationId = ?)
SELECT (
    CASE mutedStatus
    WHEN 'ALL_MUTED' THEN 0
    WHEN 'ALL_ALLOWED' THEN (
        SELECT CASE (SELECT User.user_availability_status FROM SelfUser LEFT JOIN User ON SelfUser.id = User.qualified_id)
            WHEN 'BUSY' THEN (SELECT
                isSelfMessage == 0
                AND isMentioningSelfUser == 1
                OR  isQuotingSelfUser == 1
                FROM targetMessage)
            WHEN 'AWAY' THEN 0
            WHEN 'NONE' THEN  (SELECT isSelfMessage == 0 FROM targetMessage)
            WHEN 'AVAILABLE' THEN (SELECT isSelfMessage == 0 FROM targetMessage)
            ELSE (SELECT isSelfMessage == 0 FROM targetMessage)  END
        )
    WHEN 'ONLY_MENTIONS_AND_REPLIES_ALLOWED' THEN (
        SELECT CASE (SELECT User.user_availability_status FROM SelfUser LEFT JOIN User ON SelfUser.id = User.qualified_id)
            WHEN 'AWAY' THEN 0
            ELSE  (SELECT isSelfMessage == 0
                  AND isMentioningSelfUser == 1
                  OR isQuotingSelfUser== 1
									FROM targetMessage)
            END
        )
    ELSE (SELECT isSelfMessage == 0 FROM targetMessage) END)
     AS needsToBeNotified FROM targetMessage;

getLastMessages:
SELECT * FROM MessagePreview AS message
WHERE id IN (
	SELECT id FROM Message
	WHERE
		Message.visibility = 'VISIBLE' AND
		Message.content_type IN ('TEXT', 'ASSET', 'KNOCK', 'MISSED_CALL', 'CONVERSATION_RENAMED', 'MEMBER_CHANGE')
	GROUP BY Message.conversation_id
	HAVING Message.creation_date = MAX(Message.creation_date)
);

getUnreadMessages:
SELECT * FROM MessagePreview AS message
WHERE isUnread AND isSelfMessage = 0
AND visibility = 'VISIBLE' AND contentType IN ('TEXT', 'ASSET', 'KNOCK', 'MISSED_CALL');

getUnreadMessagesCount:
SELECT
    conversation_id,
    COUNT()
FROM Message
JOIN SelfUser
JOIN Conversation ON Conversation.qualified_id = Message.conversation_id
WHERE Message.creation_date > Conversation.last_read_date
AND Message.sender_user_id != SelfUser.id
AND visibility = 'VISIBLE'
AND content_type IN ('TEXT', 'ASSET', 'KNOCK', 'MISSED_CALL')
GROUP BY conversation_id;

deleteAllMessages:
DELETE FROM Message;

deleteMessage:
DELETE FROM Message WHERE id = ? AND conversation_id = ?;

deleteMessageMentions:
DELETE FROM MessageMention WHERE  message_id = ? AND conversation_id = ?;

deleteMessageById:
DELETE FROM Message WHERE id = ?;

markMessageAsDeleted {
   UPDATE Message
   SET visibility = 'DELETED'
   WHERE id = :message_id AND conversation_id = :conversation_id;

   DELETE FROM MessageTextContent WHERE message_id = :message_id AND conversation_id = :conversation_id;
   DELETE FROM MessageAssetContent WHERE message_id = :message_id AND conversation_id = :conversation_id;
   DELETE FROM MessageMemberChangeContent WHERE message_id = :message_id AND conversation_id = :conversation_id;
   DELETE FROM MessageUnknownContent WHERE message_id = :message_id AND conversation_id = :conversation_id;
   DELETE FROM MessageRestrictedAssetContent WHERE message_id = :message_id AND conversation_id = :conversation_id;

   INSERT INTO MessageTextContent(message_id, conversation_id, text_body) VALUES(:message_id, :conversation_id, NULL);
}

markMessageAsEdited:
UPDATE Message
SET last_edit_date = ?
WHERE id = ? AND conversation_id = ?;

insertOrIgnoreMessage:
INSERT OR IGNORE INTO Message(id, content_type, conversation_id, creation_date, sender_user_id, sender_client_id, status, visibility, expects_read_confirmation)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?);

insertMessage:
INSERT INTO Message(id, content_type, conversation_id, creation_date, sender_user_id, sender_client_id, status, visibility, expects_read_confirmation)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?);

insertMessageMention:
INSERT OR IGNORE INTO MessageMention(message_id, conversation_id, start, length, user_id)
VALUES (?, ?, ?, ?, ?);

insertMessageTextContent:
INSERT OR IGNORE INTO MessageTextContent(message_id, conversation_id, text_body, quoted_message_id, is_quote_verified)
VALUES(?, ?, ?, ?, ?);

insertMessageRestrictedAssetContent:
INSERT OR IGNORE INTO MessageRestrictedAssetContent(message_id, conversation_id, asset_mime_type,asset_size,asset_name)
VALUES(?, ?, ?,?,?);

insertMessageAssetContent:
INSERT OR IGNORE INTO MessageAssetContent(message_id, conversation_id, asset_size, asset_name, asset_mime_type, asset_upload_status, asset_download_status, asset_otr_key, asset_sha256, asset_id, asset_token, asset_domain, asset_encryption_algorithm, asset_width, asset_height, asset_duration_ms, asset_normalized_loudness)
VALUES(?, ?, ?, ?, ?, ? ,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

insertMemberChangeMessage:
INSERT OR IGNORE INTO MessageMemberChangeContent(message_id, conversation_id, member_change_list, member_change_type)
VALUES(?, ?, ?, ?);

insertMessageUnknownContent:
INSERT OR IGNORE INTO MessageUnknownContent(message_id, conversation_id, unknown_type_name, unknown_encoded_data)
VALUES(?, ?, ?, ?);

insertFailedDecryptionMessageContent:
INSERT OR IGNORE INTO MessageFailedToDecryptContent(message_id, conversation_id, unknown_encoded_data)
VALUES(?, ?, ?);

insertMissedCallMessage:
INSERT OR IGNORE INTO MessageMissedCallContent(message_id, conversation_id, caller_id)
VALUES(?, ?, ?);

insertConversationRenamedMessage:
INSERT OR IGNORE INTO MessageConversationChangedContent(message_id, conversation_id, conversation_name)
VALUES(?, ?, ?);

updateMessageStatus:
UPDATE Message
SET status = ?
WHERE id = ? AND conversation_id = ?;

updateQuotedMessageId:
UPDATE MessageTextContent
SET quoted_message_id = ?
WHERE quoted_message_id = ? AND conversation_id = ?;

updateAssetUploadStatus:
UPDATE MessageAssetContent
SET asset_upload_status = ?
WHERE message_id = ? AND conversation_id = ?;

updateAssetDownloadStatus:
UPDATE MessageAssetContent
SET asset_download_status = ?
WHERE message_id = ? AND conversation_id = ?;

updateAssetContent {
    UPDATE MessageAssetContent
    SET asset_id = :assetId, asset_domain = :assetDomain, asset_otr_key = :assetOtrKey, asset_sha256 = :assetSha256, asset_name = :assetName, asset_download_status = :assetDownloadStatus, asset_upload_status = :assetUploadStatus, asset_size = :assetSize, asset_mime_type = :assetMimeType, asset_token = :assetToken, asset_encryption_algorithm = :assetEncryptionAlgorithm
    WHERE message_id = :messageId AND conversation_id = :conversationId;

    UPDATE Message
    SET visibility = :visibility
    WHERE id = :messageId AND conversation_id = : conversationId;
}

updateMessageDate:
UPDATE Message
SET creation_date = ?
WHERE id = ? AND conversation_id = ?;

updateMessagesAddMillisToDate:
UPDATE Message
SET creation_date = creation_date +  ?
WHERE conversation_id = ? AND status = ?;

updateMessageTextContent:
UPDATE MessageTextContent
SET text_body = ?
WHERE message_id = ? AND conversation_id = ?;

updateMessageId:
UPDATE Message
SET id = :newId
WHERE id = :oldId AND conversation_id = :conversationId;

selectAllMessages:
SELECT * FROM Message ORDER BY Message.creation_date DESC LIMIT ? OFFSET ?;

selectById:
SELECT * FROM MessageDetailsView WHERE id = ? AND conversationId = ?;

countByConversationIdAndVisibility:
SELECT count(*) FROM Message WHERE conversation_id = ? AND visibility IN ? ORDER BY creation_date DESC;

selectByConversationIdAndVisibility:
SELECT * FROM MessageDetailsView WHERE MessageDetailsView.conversationId = ? AND visibility IN ?  ORDER BY MessageDetailsView.date DESC LIMIT ? OFFSET ?;

selectMessagesByConversationIdAndVisibilityAfterDate:
SELECT * FROM MessageDetailsView WHERE MessageDetailsView.conversationId = ? AND visibility IN ? AND date > ? ORDER BY date DESC;

selectMessagesFromUserByStatus:
SELECT * FROM MessageDetailsView WHERE senderUserId = ? AND status = ?;

getConversationMessagesByContentType:
SELECT * FROM MessageDetailsView
WHERE MessageDetailsView.conversationId = :conversation_id AND contentType = :content_type;

deleteAllConversationMessages:
DELETE FROM Message
WHERE conversation_id IS :conversation_id;

getNotificationsMessages:
SELECT * FROM MessagePreview AS message
WHERE shouldNotify == 1
AND visibility = 'VISIBLE'
AND isSelfMessage == 0
AND contentType IN ? ORDER BY message.date DESC;

selectByConversationIdAndSenderIdAndTimeAndType:
SELECT * FROM MessageDetailsView WHERE conversationId = ? AND senderUserId = ? AND date = ? AND contentType = ?;

resetAssetUploadStatus:
UPDATE MessageAssetContent
SET asset_upload_status = 'FAILED'
WHERE asset_upload_status = 'IN_PROGRESS';

resetAssetDownloadStatus:
UPDATE MessageAssetContent
SET asset_download_status = 'FAILED'
WHERE asset_download_status = 'IN_PROGRESS';

selectPendingMessagesIdsByConversationIdAndVisibilityAfterDate:
SELECT Message.id FROM Message LEFT JOIN Conversation ON Message.conversation_id = Conversation.qualified_id
WHERE Message.conversation_id = ?
AND Message.visibility IN ?
AND (Message.expects_read_confirmation = 1)
AND Message.creation_date > Conversation.last_read_date
ORDER BY Message.creation_date DESC;

selectFailedDecryptedByConversationIdAndSenderIdAndClientId:
SELECT id FROM MessageDetailsView
WHERE conversationId = ?
AND senderUserId = ?
AND senderClientId = ?
AND contentType = 'FAILED_DECRYPTION';

markMessagesAsDecryptionResolved:
UPDATE MessageFailedToDecryptContent
SET is_decryption_resolved = 1
WHERE message_id IN ?;
