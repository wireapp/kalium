import com.wire.kalium.persistence.dao.QualifiedIDEntity;
import com.wire.kalium.persistence.dao.message.MessageEntity.ContentType;
import com.wire.kalium.persistence.dao.message.MessageEntity.MemberChangeType;
import com.wire.kalium.persistence.dao.message.MessageEntity;
import com.wire.kalium.persistence.dao.message.MessageEntityContent;
import com.wire.kalium.persistence.dao.message.RecipientFailureTypeEntity;
import kotlin.Boolean;
import kotlin.Int;
import kotlin.collections.List;
import kotlinx.datetime.Instant;

CREATE VIEW IF NOT EXISTS MessageAssetView
AS SELECT
    Message.id AS id,
    Message.conversation_id AS conversationId,
    Message.content_type AS contentType,
    Message.creation_date AS date,
    Message.visibility AS visibility,
    Message.sender_user_id AS senderUserId,
    (Message.expire_after_millis IS NOT NULL) AS isEphemeral,
    User.name AS senderName,
    SelfUser.id AS selfUserId,
    (Message.sender_user_id == SelfUser.id) AS isSelfMessage,
    AssetMessage.asset_id AS assetId,
    AssetMessage.asset_mime_type AS assetMimeType,
    AssetMessage.asset_height AS assetHeight,
    AssetMessage.asset_width AS assetWidth,
    AssetContent.data_path AS dataPath
FROM Message
LEFT JOIN SelfUser
LEFT JOIN User ON Message.sender_user_id = User.qualified_id
LEFT JOIN MessageAssetContent AS AssetMessage ON Message.id = AssetMessage.message_id AND Message.conversation_id = AssetMessage.conversation_id
LEFT JOIN Asset AS AssetContent ON AssetMessage.asset_id = AssetContent.key AND AssetMessage.asset_domain = AssetContent.domain;

countImageAssetMessagesByConversationIdAndMimeTypes:
SELECT COUNT(*) FROM MessageAssetView
WHERE conversationId = :conversationId
AND visibility IN :visibility
AND contentType IN :contentTypes
AND assetMimeType IN :mimeTypes
AND assetWidth > 0
AND assetHeight > 0
AND assetId IS NOT NULL
AND isEphemeral = FALSE
AND dataPath IS NOT NULL
ORDER BY date DESC;

getImageAssetMessagesByConversationIdAndMimeTypes:
SELECT * FROM MessageAssetView
WHERE conversationId = :conversationId
AND visibility IN :visibility
AND contentType IN :contentTypes
AND assetMimeType IN :mimeTypes
AND assetWidth > 0
AND assetHeight > 0
AND assetId IS NOT NULL
AND isEphemeral = FALSE
AND dataPath IS NOT NULL
ORDER BY date DESC
LIMIT :limit
OFFSET :offset;

getAssetMessagesByConversationIdAndMimeTypes:
SELECT * FROM MessageDetailsView
WHERE conversationId = :conversationId
AND visibility IN :visibility
AND contentType IN :contentTypes
AND assetMimeType NOT IN :mimeTypes
AND assetId IS NOT NULL
AND expireAfterMillis IS NULL
ORDER BY date DESC
LIMIT :limit
OFFSET :offset;

countAssetMessagesByConversationIdAndMimeTypes:
SELECT COUNT(*) FROM MessageDetailsView
WHERE conversationId = :conversationId
AND visibility IN :visibility
AND contentType IN :contentTypes
AND assetMimeType NOT IN :mimeTypes
AND assetId IS NOT NULL
AND expireAfterMillis IS NULL
ORDER BY date DESC;
