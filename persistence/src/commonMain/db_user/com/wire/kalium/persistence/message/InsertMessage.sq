messageNotifyData:
SELECT User.user_availability_status, Conversation.muted_status, MessageTextContent.is_quoting_self
 FROM User, Conversation, MessageTextContent
WHERE
    User.qualified_id = :self_user_id AND
    Conversation.qualified_id = :conversation_id AND
    MessageTextContent.message_id = :message_id AND
    MessageTextContent.conversation_id = :conversation_id;

-- TODO: delete this function since it does not scale and beomes slow as the DB grows
needsToBeNotified:
WITH targetMessage(isSelfMessage, isMentioningSelfUser, isQuotingSelfUser, mutedStatus) AS (
SELECT isSelfMessage,
 IFNULL( isMentioningSelfUser, 0 ) == 1 AS  isMentioningSelfUser,
	IFNULL( isQuotingSelfUser, 0 ) == 1 AS isQuotingSelfUser,
	mutedStatus  FROM MessagePreview WHERE id = ? AND conversationId = ?)
SELECT (
    CASE mutedStatus
    WHEN 'ALL_MUTED' THEN 0
    WHEN 'ALL_ALLOWED' THEN (
        SELECT CASE (SELECT User.user_availability_status FROM SelfUser LEFT JOIN User ON SelfUser.id = User.qualified_id)
            WHEN 'BUSY' THEN (SELECT
                isSelfMessage == 0
                AND isMentioningSelfUser == 1
                OR  isQuotingSelfUser == 1
                FROM targetMessage)
            WHEN 'AWAY' THEN 0
            WHEN 'NONE' THEN  (SELECT isSelfMessage == 0 FROM targetMessage)
            WHEN 'AVAILABLE' THEN (SELECT isSelfMessage == 0 FROM targetMessage)
            ELSE (SELECT isSelfMessage == 0 FROM targetMessage)  END
        )
    WHEN 'ONLY_MENTIONS_AND_REPLIES_ALLOWED' THEN (
        SELECT CASE (SELECT User.user_availability_status FROM SelfUser LEFT JOIN User ON SelfUser.id = User.qualified_id)
            WHEN 'AWAY' THEN 0
            ELSE  (SELECT isSelfMessage == 0
                  AND isMentioningSelfUser == 1
                  OR isQuotingSelfUser== 1
									FROM targetMessage)
            END
        )
    ELSE (SELECT isSelfMessage == 0 FROM targetMessage) END)
     AS needsToBeNotified FROM targetMessage;

insertOrIgnoreMessage:
INSERT OR IGNORE INTO Message(id, content_type, conversation_id, creation_date, sender_user_id, sender_client_id, status, visibility, expects_read_confirmation)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?);

insertMessage:
INSERT INTO Message(id, content_type, conversation_id, creation_date, sender_user_id, sender_client_id, status, visibility, expects_read_confirmation)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?);

insertMessageMention:
INSERT OR IGNORE INTO MessageMention(message_id, conversation_id, start, length, user_id)
VALUES (?, ?, ?, ?, ?);

insertMessageTextContent:
INSERT OR IGNORE INTO MessageTextContent(message_id, conversation_id, text_body, quoted_message_id, is_quote_verified, is_quoting_self)
VALUES(:message_id, :conversation_id, :text_body, :quoted_message_id, :is_quote_verified,
CASE WHEN
                :quoted_message_id IS NULL
                    THEN 0
                    ELSE (
                        IFNULL(
                        (SELECT (Message.sender_user_id == SelfUser.id)
                            FROM Message
                            LEFT JOIN SelfUser
                            WHERE
                                Message.id = :quoted_message_id AND
                                conversation_id = :conversation_id),
                        0 ))END);

insertMessageRestrictedAssetContent:
INSERT OR IGNORE INTO MessageRestrictedAssetContent(message_id, conversation_id, asset_mime_type,asset_size,asset_name)
VALUES(?, ?, ?,?,?);

insertMessageAssetContent:
INSERT OR IGNORE INTO MessageAssetContent(message_id, conversation_id, asset_size, asset_name, asset_mime_type, asset_upload_status, asset_download_status, asset_otr_key, asset_sha256, asset_id, asset_token, asset_domain, asset_encryption_algorithm, asset_width, asset_height, asset_duration_ms, asset_normalized_loudness)
VALUES(?, ?, ?, ?, ?, ? ,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

insertMemberChangeMessage:
INSERT OR IGNORE INTO MessageMemberChangeContent(message_id, conversation_id, member_change_list, member_change_type)
VALUES(?, ?, ?, ?);

insertMessageUnknownContent:
INSERT OR IGNORE INTO MessageUnknownContent(message_id, conversation_id, unknown_type_name, unknown_encoded_data)
VALUES(?, ?, ?, ?);

insertFailedDecryptionMessageContent:
INSERT OR IGNORE INTO MessageFailedToDecryptContent(message_id, conversation_id, unknown_encoded_data)
VALUES(?, ?, ?);

insertMissedCallMessage:
INSERT OR IGNORE INTO MessageMissedCallContent(message_id, conversation_id, caller_id)
VALUES(?, ?, ?);

insertConversationRenamedMessage:
INSERT OR IGNORE INTO MessageConversationChangedContent(message_id, conversation_id, conversation_name)
VALUES(?, ?, ?);
