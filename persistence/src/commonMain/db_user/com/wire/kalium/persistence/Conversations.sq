import com.wire.kalium.persistence.dao.ConversationEntity;
import com.wire.kalium.persistence.dao.QualifiedIDEntity;
import kotlin.collections.List;

CREATE TABLE Conversation (
    qualified_id TEXT AS QualifiedIDEntity NOT NULL PRIMARY KEY,
    name TEXT,
    type TEXT AS ConversationEntity.Type NOT NULL,
    team_id TEXT,
    mls_group_id TEXT,
    mls_group_state TEXT AS ConversationEntity.GroupState NOT NULL,
    mls_epoch INTEGER DEFAULT 0 NOT NULL,
    mls_proposal_timer TEXT,
    protocol TEXT AS ConversationEntity.Protocol NOT NULL,
    muted_status TEXT AS ConversationEntity.MutedStatus DEFAULT "ALL_ALLOWED" NOT NULL,
    muted_time INTEGER DEFAULT 0 NOT NULL,
    creator_id TEXT NOT NULL,
    last_modified_date TEXT NOT NULL,
    last_notified_message_date TEXT,
    last_read_date TEXT DEFAULT "1970-01-01T00:00:00.000Z" NOT NULL,
    access_list TEXT AS List<ConversationEntity.Access> NOT NULL,
    access_role_list TEXT AS List<ConversationEntity.AccessRole> NOT NULL,
    mls_last_keying_material_update INTEGER DEFAULT 0 NOT NULL,
    mls_cipher_suite TEXT AS ConversationEntity.CipherSuite NOT NULL
);

deleteAllConversations:
DELETE FROM Conversation;

deleteConversation:
DELETE FROM Conversation WHERE qualified_id = ?;

insertConversation:
INSERT INTO Conversation(qualified_id, name, type, team_id, mls_group_id, mls_group_state, mls_epoch, protocol, muted_status, muted_time, creator_id, last_modified_date, last_notified_message_date, access_list, access_role_list, last_read_date,mls_last_keying_material_update, mls_cipher_suite)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)
ON CONFLICT(qualified_id) DO UPDATE SET
name = excluded.name,
type = excluded.type,
team_id = excluded.team_id,
mls_group_id = excluded.mls_group_id,
mls_epoch = excluded.mls_epoch,
protocol = excluded.protocol,
muted_status = excluded.muted_status,
muted_time = excluded.muted_time,
creator_id = excluded.creator_id,
access_list = excluded.access_list,
access_role_list = excluded.access_role_list,
last_modified_date = last_modified_date,
last_notified_message_date = last_notified_message_date,
last_read_date = last_read_date,
mls_last_keying_material_update  = excluded.mls_last_keying_material_update,
mls_cipher_suite = excluded.mls_cipher_suite;

updateConversation:
UPDATE Conversation
SET name = ?, type = ?, team_id = ?
WHERE qualified_id = ?;

updateConversationGroupState:
UPDATE Conversation
SET mls_group_state = ?
WHERE mls_group_id = ?;

updateConversationNotificationsDate:
UPDATE Conversation
SET last_notified_message_date = ?
WHERE qualified_id = ?;

updateConversationModifiedDate:
UPDATE Conversation
SET last_modified_date = ?
WHERE qualified_id = ?;

updateConversationReadDate:
UPDATE Conversation
SET last_read_date = :last_read_date
WHERE qualified_id = :qualified_id;

CREATE VIEW IF NOT EXISTS ConversatonDetails AS
SELECT
Conversation.qualified_id AS qualifiedId,
CASE (Conversation.type)
    WHEN "ONE_ON_ONE" THEN  User.name
    WHEN "CONNECTION_PENDING" THEN connection_user.name
    ELSE Conversation.name
    END AS name,
Conversation.type,
Call.status AS callStatus,
CASE (Conversation.type)
    WHEN "ONE_ON_ONE" THEN  User.preview_asset_id
    WHEN "CONNECTION_PENDING" THEN connection_user.preview_asset_id
    END AS previewAssetId,
Conversation.muted_status AS mutedStatus,
CASE (Conversation.type)
    WHEN "ONE_ON_ONE" THEN User.team
    ELSE Conversation.team_id
    END AS teamId,
CASE (Conversation.type)
        WHEN "CONNECTION_PENDING" THEN Connection.last_update
        ELSE Conversation.last_modified_date
        END AS lastModifiedDate,
Conversation.last_read_date AS lastReadDate,
CASE (Conversation.type)
    WHEN "ONE_ON_ONE" THEN  User.user_availability_status
    WHEN "CONNECTION_PENDING" THEN connection_user.user_availability_status
    END AS userAvailabilityStatus,
CASE (Conversation.type)
    WHEN "ONE_ON_ONE" THEN  User.user_type
    WHEN "CONNECTION_PENDING" THEN connection_user.user_type
    END AS userType,
CASE (Conversation.type)
    WHEN "ONE_ON_ONE" THEN  User.bot_service
    WHEN "CONNECTION_PENDING" THEN connection_user.bot_service
    END AS botService,
CASE (Conversation.type)
    WHEN "ONE_ON_ONE" THEN  User.deleted
    WHEN "CONNECTION_PENDING" THEN connection_user.deleted
    END AS userDeleted,
CASE (Conversation.type)
    WHEN "ONE_ON_ONE" THEN  User.connection_status
    WHEN "CONNECTION_PENDING" THEN connection_user.connection_status
    END AS connectionStatus,
CASE (Conversation.type)
    WHEN "ONE_ON_ONE" THEN  User.qualified_id
    WHEN "CONNECTION_PENDING" THEN connection_user.qualified_id
    END AS otherUserId,
CASE (Conversation.creator_id)
    WHEN (SELECT Conversation.qualified_id FROM Conversation WHERE Conversation.type IS "SELF") THEN 1
    ELSE 0
    END AS isCreator,
Conversation.last_notified_message_date AS lastNotifiedMessageDate,
(SELECT COUNT() FROM Message AS message
    WHERE message.conversation_id = Conversation.qualified_id
    AND (DateTime(message.date) >  DateTime(Conversation.last_read_date))
    AND message.content_type IN ('TEXT', 'ASSET', 'KNOCK', 'MISSED_CALL') AND message.visibility IS 'VISIBLE')
    AS unreadMessageCount,
CASE Conversation.qualified_id
WHEN (SELECT conversation FROM Member
        WHERE Member.user =
        (SELECT Conversation.qualified_id FROM Conversation
         WHERE Conversation.type IS "SELF")) THEN 0
    ELSE 1
    END AS isMember,
Conversation.protocol,
Conversation.mls_cipher_suite,
Conversation.mls_epoch,
Conversation.mls_group_id,
Conversation.mls_last_keying_material_update,
Conversation.mls_group_state,
Conversation.access_list,
Conversation.access_role_list
FROM Conversation
LEFT JOIN Member ON Conversation.qualified_id = Member.conversation
    AND Conversation.type IS "ONE_ON_ONE"
    AND Member.user IS NOT (SELECT Conversation.qualified_id FROM Conversation WHERE Conversation.type IS "SELF")
LEFT JOIN User ON User.qualified_id = Member.user
LEFT JOIN Connection ON Connection.qualified_conversation = Conversation.qualified_id
    AND (Connection.status = 'SENT'
         OR Connection.status = 'PENDING'
         OR Connection.status = "NOT_CONNECTED"
         AND Conversation.type IS "CONNECTION_PENDING")
LEFT JOIN User AS connection_user ON Connection.qualified_to = connection_user.qualified_id
LEFT JOIN Call ON Call.id IS (SELECT id FROM Call WHERE Call.conversation_id = Conversation.qualified_id AND Call.status IS "STILL_ONGOING" ORDER BY created_at DESC LIMIT 1);

selectAllConversationDetails:
SELECT * FROM ConversatonDetails
WHERE type IS NOT "SELF" AND
(type IS "GROUP" AND (name IS NOT NULL OR otherUserId IS NOT NULL) --filter deleted groups after first sync
OR (type IS NOT "GROUP" AND otherUserId IS NOT NULL)) -- show other conversation- todo: problem here! if the sync wasn't succesful the the user seems to be null!
ORDER BY lastModifiedDate DESC, name COLLATE NOCASE ASC;

selectAllConversations:
SELECT * FROM Conversation WHERE type IS NOT 'CONNECTION_PENDING' ORDER BY last_modified_date DESC, name ASC;

selectByQualifiedId:
SELECT * FROM Conversation WHERE qualified_id = ?;

selectByGroupId:
SELECT * FROM Conversation WHERE mls_group_id = ?;

selectByGroupState:
SELECT * FROM Conversation WHERE mls_group_state = ? AND protocol = ?;

getConversationIdByGroupId:
SELECT qualified_id FROM Conversation WHERE mls_group_id = ?;

selectConversationsWithUnnotifiedMessages:
SELECT * FROM Conversation WHERE muted_status != 'ALL_MUTED' AND (last_notified_message_date ISNULL OR DateTime(last_modified_date) > DateTime(last_notified_message_date));

updateConversationMutingStatus:
UPDATE Conversation
SET muted_status = ?, muted_time = ?
WHERE qualified_id = ?;

getUnreadConversationCount:
SELECT COUNT() FROM Conversation AS conversation
 WHERE DateTime(conversation.last_modified_date) > DateTime(conversation.last_read_date)
AND conversation.type IS NOT "SELF";
updateAccess:
UPDATE Conversation SET access_list= ?, access_role_list = ? WHERE qualified_id = ?;

updateKeyingMaterialDate:
UPDATE Conversation SET mls_last_keying_material_update= ? WHERE mls_group_id = ?;

selectByKeyingMaterialUpdate:
SELECT mls_group_id FROM Conversation WHERE mls_group_state = ? AND protocol = ? AND mls_last_keying_material_update - ? <0 AND mls_group_id IS NOT NULL;

updateProposalTimer:
UPDATE Conversation SET mls_proposal_timer = COALESCE(mls_proposal_timer, ?) WHERE mls_group_id = ?;

clearProposalTimer:
UPDATE Conversation SET mls_proposal_timer = NULL WHERE mls_group_id = ?;

selectProposalTimers:
SELECT mls_group_id, mls_proposal_timer FROM Conversation WHERE protocol = ? AND mls_group_id IS NOT NULL AND mls_proposal_timer IS NOT NULL;

isUserMember:
SELECT user FROM Member WHERE conversation = ? AND user = ?;

whoDeletedMeInConversation:
SELECT sender_user_id FROM Message WHERE id IN (SELECT message_id FROM MessageMemberChangeContent WHERE conversation_id = :conversation_id AND member_change_type = "REMOVED" AND member_change_list LIKE ('%' || :self_user_id || '%')) ORDER BY DateTime(date) DESC LIMIT 1;

updateConversationName:
UPDATE Conversation
SET name = ?, last_modified_date = ?
WHERE qualified_id = ?;

updateConversationType:
UPDATE Conversation
SET type = ?
WHERE qualified_id = ?;

selfConversationId:
SELECT qualified_id FROM Conversation WHERE type = 'SELF' LIMIT 1;
