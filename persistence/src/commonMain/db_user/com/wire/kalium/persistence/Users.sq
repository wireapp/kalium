import com.wire.kalium.persistence.dao.BotIdEntity;
import com.wire.kalium.persistence.dao.ConnectionEntity;
import com.wire.kalium.persistence.dao.QualifiedIDEntity;
import com.wire.kalium.persistence.dao.UserAvailabilityStatusEntity;
import com.wire.kalium.persistence.dao.UserTypeEntity;
import com.wire.kalium.persistence.dao.SupportedProtocolEntity;
import kotlin.Int;
import kotlinx.datetime.Instant;
import kotlin.Boolean;
import kotlin.collections.Set;

CREATE TABLE User (
    qualified_id TEXT AS QualifiedIDEntity NOT NULL PRIMARY KEY,
    name TEXT,
    handle TEXT,
    email TEXT,
    phone TEXT,
    accent_id INTEGER AS Int NOT NULL DEFAULT 0,
    team TEXT,
    connection_status TEXT AS ConnectionEntity.State NOT NULL DEFAULT 'NOT_CONNECTED',
    preview_asset_id TEXT AS QualifiedIDEntity,
    complete_asset_id TEXT AS QualifiedIDEntity,
    user_availability_status TEXT AS UserAvailabilityStatusEntity NOT NULL DEFAULT 'NONE',
    user_type TEXT AS UserTypeEntity NOT NULL DEFAULT 'STANDARD',
    bot_service TEXT AS BotIdEntity,
    deleted INTEGER AS Boolean NOT NULL DEFAULT 0,
    incomplete_metadata INTEGER AS Boolean NOT NULL DEFAULT 0,
    expires_at INTEGER AS Instant,
    defederated INTEGER AS Boolean NOT NULL DEFAULT 0,
    supported_protocols TEXT AS Set<SupportedProtocolEntity> DEFAULT 'PROTEUS',
    active_one_on_one_conversation_id TEXT AS QualifiedIDEntity
);
CREATE INDEX user_team_index ON User(team);
CREATE INDEX user_service_id ON User(bot_service);

deleteUser:
DELETE FROM User WHERE qualified_id = ?;

insertUser:
INSERT INTO User(qualified_id, name, handle, email, phone, accent_id, team, connection_status, preview_asset_id, complete_asset_id, user_type, bot_service, deleted, incomplete_metadata, expires_at, supported_protocols, active_one_on_one_conversation_id)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(qualified_id) DO UPDATE SET
name = excluded.name,
handle = excluded.handle,
email = excluded.email,
phone = excluded.phone,
accent_id = excluded.accent_id,
team = excluded.team,
preview_asset_id = excluded.preview_asset_id,
complete_asset_id = excluded.complete_asset_id,
user_type = excluded.user_type,
bot_service = excluded.bot_service,
deleted = excluded.deleted,
incomplete_metadata = excluded.incomplete_metadata,
expires_at = excluded.expires_at,
defederated = 0,
supported_protocols = excluded.supported_protocols;

insertOrIgnoreUser:
INSERT OR IGNORE INTO User(qualified_id, name, handle, email, phone, accent_id, team, connection_status, preview_asset_id, complete_asset_id, user_type, bot_service, deleted, incomplete_metadata, expires_at, supported_protocols)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateUser:
UPDATE OR FAIL User
SET
name = coalesce(:name, name),
handle = coalesce(:handle, handle),
email = coalesce(:email, email),
accent_id = coalesce(:accent_id, accent_id),
preview_asset_id = :preview_asset_id, preview_asset_id = coalesce(:preview_asset_id, preview_asset_id),
complete_asset_id = :complete_asset_id, complete_asset_id = coalesce(:complete_asset_id, complete_asset_id),
supported_protocols = :supported_protocols, supported_protocols = coalesce(:supported_protocols, supported_protocols)
WHERE qualified_id = ?;

updatePartialUserInformation:
UPDATE User
SET
name = coalesce(:name, name),
handle = coalesce(:handle, handle),
email = coalesce(:email, email),
accent_id = coalesce(:accent_id, accent_id),
preview_asset_id = :preview_asset_id, preview_asset_id = coalesce(:preview_asset_id, preview_asset_id),
complete_asset_id = :complete_asset_id, complete_asset_id = coalesce(:complete_asset_id, complete_asset_id),
supported_protocols = :supported_protocols, supported_protocols = coalesce(:supported_protocols, supported_protocols)
WHERE qualified_id = ?;

upsertTeamMemberUserType:
INSERT INTO User(qualified_id, connection_status, user_type)
VALUES(?, ?, ?)
ON CONFLICT(qualified_id) DO UPDATE SET
connection_status = excluded.connection_status,
user_type = excluded.user_type;

markUserAsDeleted:
INSERT INTO User(qualified_id, user_type, deleted)
VALUES (:qualified_id, :user_type, 1)
ON CONFLICT (qualified_id) DO UPDATE SET
preview_asset_id = NULL,
complete_asset_id = NULL,
 user_type = excluded.user_type,
  deleted = 1;

deleteUserFromGroupConversations:
DELETE FROM Member
WHERE conversation IN (
    SELECT conversation FROM Member
    JOIN Conversation ON Conversation.qualified_id = Member.conversation
    WHERE Member.user = :qualified_id AND Conversation.type = 'GROUP'
) AND Member.user = :qualified_id;

markUserAsDefederated:
UPDATE User
SET team = NULL , preview_asset_id = NULL, complete_asset_id = NULL, defederated = 1
WHERE qualified_id = ?;

insertOrIgnoreUserId:
INSERT OR IGNORE INTO User(qualified_id, incomplete_metadata)
VALUES(?, 1);

insertOrIgnoreUserIdWithConnectionStatus:
INSERT OR IGNORE INTO User(qualified_id, connection_status)
VALUES(?, ?);

upsertUserConnectionStatus:
INSERT INTO User(qualified_id, connection_status)
VALUES(?, ?)
ON CONFLICT(qualified_id) DO UPDATE SET
connection_status = excluded.connection_status;

CREATE VIEW IF NOT EXISTS UserDetails AS
SELECT
User.qualified_id,
User.name,
User.handle,
User.email,
User.phone,
User.accent_id,
User.team,
User.connection_status,
User.preview_asset_id,
User.complete_asset_id,
User.user_availability_status,
User.user_type,
User.bot_service,
User.deleted,
User.incomplete_metadata,
User.expires_at,
User.defederated,
User.supported_protocols,
User.active_one_on_one_conversation_id,
CASE
    WHEN SUM(Client.is_verified) = COUNT(*) THEN 1
    ELSE 0
END AS is_proteus_verified,
CASE
    WHEN SUM(Client.device_type = 'LegalHold') > 0 THEN 1
    ELSE 0
END AS is_under_legal_hold
FROM User
LEFT JOIN Client ON User.qualified_id = Client.user_id
GROUP BY User.qualified_id;

selectAllUsers:
SELECT * FROM UserDetails;

selectAllUsersWithConnectionStatus:
SELECT * FROM UserDetails WHERE connection_status = ? AND defederated = 0;

selectByQualifiedId:
SELECT * FROM User WHERE qualified_id IN ?;

selectDetailsByQualifiedId:
SELECT * FROM UserDetails WHERE qualified_id IN ?;

selectMinimizedByQualifiedId:
SELECT qualified_id, name, complete_asset_id, user_type FROM User WHERE qualified_id IN ?;

selectWithTeamByQualifiedId:
SELECT * FROM UserDetails LEFT JOIN Team ON UserDetails.team == Team.id WHERE UserDetails.qualified_id IN ?;

selectByNameOrHandleOrEmailAndConnectionState:
SELECT * FROM UserDetails
WHERE (name LIKE ('%' || :searchQuery || '%')
OR  handle LIKE  ('%' || :searchQuery || '%')
OR  email LIKE  ('%' || :searchQuery || '%'))
AND connection_status IN :connectionStatuses
AND defederated = 0;

selectByHandleAndConnectionState:
SELECT * FROM UserDetails
WHERE handle LIKE ('%' || :searchQuery || '%')
AND connection_status IN :connectionStatuses
AND defederated = 0;

selectUsersByTeam:
SELECT * FROM UserDetails WHERE team = ?;

updateUserhandle:
UPDATE User SET handle = ? WHERE qualified_id = ?;

updateUserAsset:
UPDATE User SET complete_asset_id = ?, preview_asset_id = ? WHERE complete_asset_id = ?;

updateUserAvailabilityStatus:
UPDATE User SET user_availability_status = ? WHERE qualified_id = ?;

getUsersNotInConversationByNameOrHandleOrEmail:
SELECT * FROM UserDetails AS user
WHERE NOT EXISTS (SELECT user FROM Member AS member WHERE member.conversation == :converastion_id AND user.qualified_id == member.user)
AND  (name LIKE ('%' || :searchQuery || '%')
OR  handle LIKE  ('%' || :searchQuery || '%')
OR  email LIKE  ('%' || :searchQuery || '%'))
AND connection_status = 'ACCEPTED'
AND defederated = 0;

getUsersNotInConversationByHandle:
SELECT * FROM UserDetails AS user
WHERE NOT EXISTS (SELECT user FROM Member AS member WHERE member.conversation == :converastion_id AND user.qualified_id == member.user)
AND handle LIKE ('%' || :searchQuery || '%')
AND connection_status = 'ACCEPTED'
AND defederated = 0;

getUsersNotPartOfTheConversation:
SELECT * FROM UserDetails AS user
 WHERE NOT EXISTS (SELECT user FROM Member AS member WHERE member.conversation == :converastion_id AND user.qualified_id == member.user)
 AND connection_status = 'ACCEPTED'
 AND defederated = 0;

updateUserDisplayName:
UPDATE User SET name = ? WHERE qualified_id = ?;

selectUsersWithoutMetadata:
SELECT * FROM UserDetails AS user
WHERE deleted = 0 AND incomplete_metadata = 1;

selectUsersWithOneOnOne:
SELECT * FROM User
WHERE deleted = 0 AND qualified_id != (SELECT id FROM SelfUser) AND qualified_id IN
(
	SELECT user FROM Member
	JOIN Conversation ON Conversation.qualified_id = Member.conversation
	WHERE Conversation.type = 'ONE_ON_ONE' AND Member.user = User.qualified_id
	LIMIT 1
);

userIdsWithoutSelf:
SELECT qualified_id FROM User WHERE qualified_id != (SELECT id FROM SelfUser);

updateUserSupportedProtocols:
UPDATE User SET supported_protocols = ? WHERE qualified_id = ?;

updateOneOnOnConversationId:
UPDATE User SET active_one_on_one_conversation_id = ? WHERE qualified_id = ?;

setOneOnOneConversationIdIfNotSet:
UPDATE User SET active_one_on_one_conversation_id = ? WHERE qualified_id = ? AND active_one_on_one_conversation_id IS NULL;

isOneUserATeamMember:
SELECT EXISTS (
    SELECT 1 FROM User
    WHERE qualified_id IN :userIdList AND team = :teamId
);

selectGroupConversationsUserIsMemberOf:
SELECT c.qualified_id
FROM Conversation c
INNER JOIN Member m ON c.qualified_id = m.conversation
WHERE m.user = :userId
  AND c.type = 'GROUP';

selectOneOnOnConversationId:
SELECT active_one_on_one_conversation_id FROM User WHERE qualified_id = :userId;

selectNamesAndHandle:
SELECT name, handle FROM User WHERE qualified_id = :userId;
