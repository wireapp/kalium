import com.wire.kalium.persistence.dao.BotEntity;
import com.wire.kalium.persistence.dao.ConnectionEntity;
import com.wire.kalium.persistence.dao.QualifiedIDEntity;
import com.wire.kalium.persistence.dao.UserAvailabilityStatusEntity;
import com.wire.kalium.persistence.dao.UserTypeEntity;
import kotlin.Int;
import kotlin.Boolean;

CREATE TABLE User (
    qualified_id TEXT AS QualifiedIDEntity NOT NULL PRIMARY KEY,
    name TEXT,
    handle TEXT,
    email TEXT,
    phone TEXT,
    accent_id INTEGER AS Int NOT NULL DEFAULT 0,
    team TEXT,
    connection_status TEXT AS ConnectionEntity.State NOT NULL DEFAULT 'NOT_CONNECTED',
    preview_asset_id TEXT AS QualifiedIDEntity,
    complete_asset_id TEXT AS QualifiedIDEntity,
    user_availability_status TEXT AS UserAvailabilityStatusEntity NOT NULL DEFAULT 'NONE',
    user_type TEXT AS UserTypeEntity NOT NULL DEFAULT 'STANDARD',
    bot_service TEXT AS BotEntity,
    deleted INTEGER AS Boolean NOT NULL DEFAULT 0
);
CREATE INDEX user_team_index ON User(team);

deleteAllUsers:
DELETE FROM User;

deleteUser:
DELETE FROM User WHERE qualified_id = ?;

insertUser:
INSERT INTO User(qualified_id, name, handle, email, phone, accent_id, team, connection_status, preview_asset_id, complete_asset_id, user_type, bot_service, deleted)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(qualified_id) DO UPDATE SET
name = excluded.name,
handle = excluded.handle,
email = excluded.email,
phone = excluded.phone,
accent_id = excluded.accent_id,
team = excluded.team,
connection_status = excluded.connection_status,
preview_asset_id = excluded.preview_asset_id,
complete_asset_id = excluded.complete_asset_id,
user_type = excluded.user_type,
bot_service = excluded.bot_service,
deleted = excluded.deleted;

insertOrIgnoreUser:
INSERT OR IGNORE INTO User(qualified_id, name, handle, email, phone, accent_id, team, connection_status, preview_asset_id, complete_asset_id, user_type, bot_service, deleted)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateUser:
UPDATE User
SET name = ?, handle = ?, email = ?, phone = ?, accent_id = ?, team = ?, preview_asset_id = ?, complete_asset_id = ?, user_type = ?, bot_service = ?
WHERE qualified_id = ?;

updateTeamMemberUser:
UPDATE User
SET name = ?, handle = ?, email = ?, phone = ?, accent_id = ?, team = ?, preview_asset_id = ?, complete_asset_id = ?, bot_service = ?
WHERE qualified_id = ?;

updateTeamMemberType:
UPDATE User
SET team = ?, connection_status = ?, user_type = ?
WHERE qualified_id = ?;

markUserAsDeleted:
UPDATE User
SET team = NULL , preview_asset_id = NULL, complete_asset_id = NULL, user_type = ?, deleted = 1
WHERE qualified_id = ?;

insertOrIgnoreUserId:
INSERT OR IGNORE INTO User(qualified_id)
VALUES(?);

updateSelfUser:
UPDATE User
SET name = ?, handle = ?, email = ?, accent_id = ?, preview_asset_id = ?, complete_asset_id = ?
WHERE qualified_id = ?;

insertOrIgnoreUserIdWithConnectionStatus:
INSERT OR IGNORE INTO User(qualified_id, connection_status)
VALUES(?, ?);

updateUserConnectionStatus:
UPDATE User SET connection_status = ? WHERE qualified_id = ?;

selectAllUsers:
SELECT * FROM User;

selectAllUsersWithConnectionStatus:
SELECT * FROM User WHERE connection_status = ?;

selectByQualifiedId:
SELECT * FROM User WHERE qualified_id IN ?;

selectMinimizedByQualifiedId:
SELECT qualified_id, name, complete_asset_id, user_type FROM User WHERE qualified_id IN ?;

selectByNameOrHandleOrEmailAndConnectionState:
SELECT * FROM User
WHERE (name LIKE ('%' || :searchQuery || '%')
OR  handle LIKE  ('%' || :searchQuery || '%')
OR  email LIKE  ('%' || :searchQuery || '%'))
AND connection_status IN :connectionStatuses;

selectByHandleAndConnectionState:
SELECT * FROM User
WHERE handle LIKE ('%' || :searchQuery || '%')
AND connection_status IN :connectionStatuses;

selectUsersByTeam:
SELECT * FROM User WHERE team = ?;

updateUserhandle:
UPDATE User SET handle = ? WHERE qualified_id = ?;

selectChanges:
SELECT changes();

updateUserAvailabilityStatus:
UPDATE User SET user_availability_status = ? WHERE qualified_id = ?;

getUsersNotInConversationByNameOrHandleOrEmail:
SELECT * FROM User AS user
WHERE NOT EXISTS (SELECT user FROM Member AS member WHERE member.conversation == :converastion_id AND user.qualified_id == member.user)
AND  (name LIKE ('%' || :searchQuery || '%')
OR  handle LIKE  ('%' || :searchQuery || '%')
OR  email LIKE  ('%' || :searchQuery || '%'))
AND connection_status = "ACCEPTED";

getUsersNotInConversationByHandle:
SELECT * FROM User AS user
WHERE NOT EXISTS (SELECT user FROM Member AS member WHERE member.conversation == :converastion_id AND user.qualified_id == member.user)
AND handle LIKE ('%' || :searchQuery || '%')
AND connection_status = "ACCEPTED";

getUsersNotPartOfTheConversation:
SELECT * FROM User AS user
 WHERE NOT EXISTS (SELECT user FROM Member AS member WHERE member.conversation == :converastion_id AND user.qualified_id == member.user)
 AND connection_status = "ACCEPTED";
