import com.wire.kalium.persistence.dao.ConversationEntity;
import com.wire.kalium.persistence.dao.QualifiedIDEntity;
import com.wire.kalium.persistence.dao.call.CallEntity;

CREATE TABLE Call (
    conversation_id TEXT AS QualifiedIDEntity NOT NULL,
    id TEXT NOT NULL,
    status TEXT AS CallEntity.Status NOT NULL,
    caller_id TEXT NOT NULL,
    conversation_type TEXT AS ConversationEntity.Type NOT NULL,
    created_at TEXT NOT NULL,
    PRIMARY KEY (conversation_id, id)
);
CREATE INDEX call_date_index ON Call(created_at);
CREATE INDEX call_conversation_index ON Call(conversation_id);
CREATE INDEX call_caller_index ON Call(caller_id);

insertCall:
INSERT INTO Call(conversation_id, id, status, caller_id, conversation_type, created_at)
VALUES (?, ?, ?, ?, ?, ?);

selectAllCalls:
SELECT * FROM Call;

selectEstablishedCalls:
SELECT * FROM Call WHERE status = 'ESTABLISHED' OR status = 'ANSWERED';

selectOngoingCalls:
SELECT * FROM Call WHERE status = 'STILL_ONGOING';

selectIncomingCalls:
SELECT * FROM Call WHERE status = 'INCOMING';

updateLastCallStatusByConversationId:
UPDATE Call
SET status = ?
WHERE
    id IN (
        SELECT id
        FROM Call
        WHERE
            status != 'CLOSED'
            AND status != 'MISSED'
            AND conversation_id = ?
        ORDER BY created_at DESC
        LIMIT 1
    );

selectLastClosedCallCreationTimeConversationId:
SELECT created_at
FROM Call
WHERE
    conversation_id = :conversationId
    AND status = 'CLOSED'
ORDER BY created_at DESC
LIMIT 1;

selectLastCallConversionTypeByConversationId:
SELECT conversation_type
FROM Call
WHERE
    conversation_id = :conversationId
ORDER BY created_at DESC
LIMIT 1;

lastCallStatusByConversationId:
SELECT status
FROM Call
WHERE
    conversation_id = :conversationId
ORDER BY created_at DESC
LIMIT 1;

lastCallCallerIdByConversationId:
SELECT caller_id
FROM Call
WHERE
    conversation_id = :conversationId
ORDER BY created_at DESC
LIMIT 1;

selectLastClosedCallByConversationId:
SELECT *
FROM Call
WHERE
    conversation_id = :conversationId
    AND status = 'CLOSED'
ORDER BY created_at DESC
LIMIT 1;

updateOpenCallsToClosedStatus:
UPDATE Call
SET status = 'CLOSED'
WHERE
    status != 'CLOSED'
    AND status != 'MISSED';
