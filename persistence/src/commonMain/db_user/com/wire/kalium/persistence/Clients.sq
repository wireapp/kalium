import com.wire.kalium.persistence.dao.QualifiedIDEntity;
import com.wire.kalium.persistence.dao.client.ClientTypeEntity;
import com.wire.kalium.persistence.dao.client.DeviceTypeEntity;
import kotlin.Boolean;
import kotlinx.datetime.Instant;

CREATE TABLE Client (
    user_id TEXT AS QualifiedIDEntity NOT NULL,
    id TEXT NOT NULL,
    device_type TEXT AS DeviceTypeEntity,
    is_valid INTEGER  AS Boolean NOT NULL DEFAULT 1,
    is_verified INTEGER  AS Boolean NOT NULL DEFAULT 0,
    client_type TEXT AS ClientTypeEntity DEFAULT NULL,
    registration_date INTEGER AS Instant DEFAULT NULL,
    label TEXT DEFAULT NULL,
    model TEXT DEFAULT NULL,
    FOREIGN KEY (user_id) REFERENCES User(qualified_id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, id)
);

deleteAllClients:
DELETE FROM User;

deleteClient:
DELETE FROM Client WHERE user_id = ? AND id = ?;

deleteClientsOfUser:
DELETE FROM Client WHERE user_id = ?;

insertClient:
INSERT INTO Client(user_id, id,device_type, client_type, is_valid, registration_date, label, model)
VALUES(?, ?,?, ?, ?,?, ?, ?)
ON CONFLICT(id, user_id) DO UPDATE SET
device_type = coalesce(excluded.device_type, device_type),
registration_date = coalesce(excluded.registration_date, registration_date),
label = coalesce(excluded.label, label),
model = coalesce(excluded.model, model),
is_valid = is_valid;

selectAllClients:
SELECT * FROM Client;

selectAllClientsByUserId:
SELECT * FROM Client WHERE user_id = ?;

selectAllClientsByUserIdList:
SELECT * FROM Client WHERE user_id IN :userIds GROUP BY user_id;

selectAllClientsByConversation:
SELECT * FROM Client WHERE user_id IN (SELECT user FROM Member WHERE conversation = :conversation_id);

selectByUserAndClientId:
SELECT * FROM Client WHERE user_id = :user_id AND id = :client_id;

deleteClientsOfUserExcept:
DELETE FROM Client WHERE user_id = :user_id AND id NOT IN :exception_ids;

tryMarkAsInvalid:
UPDATE OR IGNORE Client SET is_valid = 0 WHERE user_id = :user_id AND  id IN :clientId_List;

conversationRecipets:
SELECT * FROM Client WHERE user_id IN (SELECT user FROM Member WHERE conversation = :conversation_id) AND is_valid = 1;

updateClientVerificatioStatus:
UPDATE Client SET is_verified = :is_verified WHERE user_id = :user_id AND id = :client_id;

selectRecipientsByConversationAndUserId:
SELECT *
 FROM Client
  WHERE user_id IN
  (SELECT user FROM Member WHERE conversation = :conversation_id AND user_id IN :userIdList)
  AND is_valid = 1;
