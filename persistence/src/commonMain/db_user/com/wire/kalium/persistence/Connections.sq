import com.wire.kalium.persistence.dao.ConnectionEntity;
import com.wire.kalium.persistence.dao.QualifiedIDEntity;
import kotlin.Int;
import kotlin.Boolean;

CREATE TABLE Connection (
    from_id TEXT NOT NULL,
    conversation_id TEXT NOT NULL,
    qualified_conversation TEXT AS QualifiedIDEntity NOT NULL PRIMARY KEY ,
    to_id TEXT NOT NULL,
    last_update TEXT NOT NULL,
    qualified_to TEXT AS QualifiedIDEntity NOT NULL,
    status TEXT AS ConnectionEntity.State NOT NULL DEFAULT 'NOT_CONNECTED',
    should_notify INTEGER AS Boolean DEFAULT 1
);

deleteAllConnections:
DELETE FROM Connection;

deleteConnection:
DELETE FROM Connection WHERE qualified_conversation = ?;

insertConnection:
INSERT INTO Connection(from_id, conversation_id, qualified_conversation, to_id, last_update, qualified_to, status)
VALUES(?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(qualified_conversation) DO UPDATE SET
from_id = excluded.from_id,
conversation_id = excluded.conversation_id,
to_id = excluded.to_id,
last_update = excluded.last_update,
qualified_to = excluded.qualified_to,
status = excluded.status;

updateConnectionLastUpdated:
UPDATE Connection SET last_update = ? WHERE to_id = ?;

updateNotificationFlag:
UPDATE Connection SET should_notify = ? WHERE qualified_to = ?;

selectConnectionRequests:
SELECT * FROM Connection WHERE status = 'SENT' OR status = 'PENDING';

selectConnectionsForNotification:
SELECT * FROM Connection WHERE status = 'PENDING' AND should_notify = 1;

selectChanges:
SELECT changes();
