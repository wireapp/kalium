import com.wire.kalium.persistence.dao.member.MemberEntity.Role;
import com.wire.kalium.persistence.dao.QualifiedIDEntity;

CREATE TABLE Member (
    user TEXT AS QualifiedIDEntity NOT NULL,
    conversation TEXT AS QualifiedIDEntity NOT NULL,
    role TEXT AS Role NOT NULL,
    CONSTRAINT member_conv PRIMARY KEY (user, conversation) ON CONFLICT IGNORE,
    FOREIGN KEY (conversation) REFERENCES Conversation(qualified_id)  ON DELETE CASCADE,
    FOREIGN KEY (user) REFERENCES User(qualified_id) ON DELETE CASCADE
);

CREATE INDEX member_conversation_index ON Member(conversation);

insertMember:
INSERT OR IGNORE INTO Member(user, conversation, role)
VALUES (?, ?, ?);

deleteMember:
DELETE FROM Member WHERE conversation = ? AND user = ?;

deleteMembersFromConversation:
DELETE FROM Member WHERE conversation = ?;

-- TODO: replace LIKE with absolute value
selectAllMembersByConversation:
SELECT * FROM Member WHERE conversation LIKE ('%' || :searchQuery || '%');

selectConversationByMember:
SELECT * FROM Member
JOIN ConversationDetails ON ConversationDetails.qualifiedId = Member.conversation
WHERE ConversationDetails.type = 'ONE_ON_ONE' AND Member.user = ?
LIMIT  1;

selectConversationsByMember:
SELECT * FROM Member
JOIN Conversation ON Conversation.qualified_id = Member.conversation
WHERE Member.user = ?;

updateMemberRole:
UPDATE Member
SET role = ?
WHERE user = ? AND conversation = ?;

deleteUserFromGroupConversations:
DELETE FROM Member
WHERE conversation IN (
    SELECT conversation FROM Member
    JOIN Conversation ON Conversation.qualified_id = Member.conversation
    WHERE Member.user = ? AND Conversation.type = 'GROUP'
) AND Member.user = ?;

isUserMember:
SELECT user FROM Member WHERE conversation = :conversationId AND user = :userId;
