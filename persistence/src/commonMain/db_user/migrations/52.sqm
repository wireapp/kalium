ALTER TABLE User ADD COLUMN defederated INTEGER AS Boolean NOT NULL DEFAULT 0;

DROP VIEW IF EXISTS ConversationDetails;

CREATE VIEW IF NOT EXISTS ConversationDetails AS
SELECT
Conversation.qualified_id AS qualifiedId,
CASE (Conversation.type)
    WHEN 'ONE_ON_ONE' THEN  User.name
    WHEN 'CONNECTION_PENDING' THEN connection_user.name
    ELSE Conversation.name
END AS name,
Conversation.type,
Call.status AS callStatus,
CASE (Conversation.type)
    WHEN 'ONE_ON_ONE' THEN  User.preview_asset_id
    WHEN 'CONNECTION_PENDING' THEN connection_user.preview_asset_id
END AS previewAssetId,
Conversation.muted_status AS mutedStatus,
CASE (Conversation.type)
    WHEN 'ONE_ON_ONE' THEN User.team
    ELSE Conversation.team_id
END AS teamId,
CASE (Conversation.type)
    WHEN 'CONNECTION_PENDING' THEN Connection.last_update_date
    ELSE Conversation.last_modified_date
END AS lastModifiedDate,
Conversation.last_read_date AS lastReadDate,
CASE (Conversation.type)
    WHEN 'ONE_ON_ONE' THEN  User.user_availability_status
    WHEN 'CONNECTION_PENDING' THEN connection_user.user_availability_status
END AS userAvailabilityStatus,
CASE (Conversation.type)
    WHEN 'ONE_ON_ONE' THEN  User.user_type
    WHEN 'CONNECTION_PENDING' THEN connection_user.user_type
END AS userType,
CASE (Conversation.type)
    WHEN 'ONE_ON_ONE' THEN  User.bot_service
    WHEN 'CONNECTION_PENDING' THEN connection_user.bot_service
END AS botService,
CASE (Conversation.type)
    WHEN 'ONE_ON_ONE' THEN  User.deleted
    WHEN 'CONNECTION_PENDING' THEN connection_user.deleted
END AS userDeleted,
CASE (Conversation.type)
    WHEN 'ONE_ON_ONE' THEN  User.defederated
    WHEN 'CONNECTION_PENDING' THEN connection_user.defederated
END AS userDefederated,
CASE (Conversation.type)
    WHEN 'ONE_ON_ONE' THEN  User.connection_status
    WHEN 'CONNECTION_PENDING' THEN connection_user.connection_status
END AS connectionStatus,
CASE (Conversation.type)
    WHEN 'ONE_ON_ONE' THEN  User.qualified_id
    WHEN 'CONNECTION_PENDING' THEN connection_user.qualified_id
END AS otherUserId,
CASE
    WHEN ((SELECT id FROM SelfUser LIMIT 1) LIKE (Conversation.creator_id || '@%')) THEN 1
    ELSE 0
END AS isCreator,
Conversation.last_notified_date AS lastNotifiedMessageDate,
memberRole. role AS selfRole,
Conversation.protocol,
Conversation.mls_cipher_suite,
Conversation.mls_epoch,
Conversation.mls_group_id,
Conversation.mls_last_keying_material_update_date,
Conversation.mls_group_state,
Conversation.access_list,
Conversation.access_role_list,
Conversation.team_id,
Conversation.mls_proposal_timer,
Conversation.muted_time,
Conversation.creator_id,
Conversation.last_modified_date,
Conversation.receipt_mode,
Conversation.message_timer,
Conversation.user_message_timer
FROM Conversation
LEFT JOIN Member ON Conversation.qualified_id = Member.conversation
    AND Conversation.type IS 'ONE_ON_ONE'
    AND Member.user IS NOT (SELECT SelfUser.id FROM SelfUser LIMIT 1)
LEFT JOIN Member AS memberRole ON Conversation.qualified_id = memberRole.conversation
    AND memberRole.user IS (SELECT SelfUser.id FROM SelfUser LIMIT 1)
LEFT JOIN User ON User.qualified_id = Member.user
LEFT JOIN Connection ON Connection.qualified_conversation = Conversation.qualified_id
    AND (Connection.status = 'SENT'
         OR Connection.status = 'PENDING'
         OR Connection.status = 'NOT_CONNECTED'
         AND Conversation.type IS 'CONNECTION_PENDING')
LEFT JOIN User AS connection_user ON Connection.qualified_to = connection_user.qualified_id
LEFT JOIN Call ON Call.id IS (SELECT id FROM Call WHERE Call.conversation_id = Conversation.qualified_id AND Call.status IS 'STILL_ONGOING' ORDER BY created_at DESC LIMIT 1);

CREATE TABLE MessageFederationContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      domain_list TEXT AS List<String> NOT NULL,
      federation_type TEXT AS FederationType NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

DROP VIEW IF EXISTS ConversationDetails;

CREATE VIEW IF NOT EXISTS MessagePreview
AS SELECT
    Message.id AS id,
    Message.conversation_id AS conversationId,
    Message.content_type AS contentType,
    Message.creation_date AS date,
    Message.visibility AS visibility,
    Message.sender_user_id AS senderUserId,
    (Message.expire_after_millis IS NOT NULL) AS isEphemeral,
    User.name AS senderName,
    User.connection_status AS senderConnectionStatus,
    User.deleted AS senderIsDeleted,
    SelfUser.id AS selfUserId,
    (Message.sender_user_id == SelfUser.id) AS isSelfMessage,
    MemberChangeContent.member_change_list AS memberChangeList,
    MemberChangeContent.member_change_type AS memberChangeType,
    ConversationNameChangedContent.conversation_name AS updateConversationName,
    Conversation.name AS conversationName,
    (Mention.user_id IS NOT NULL) AS isMentioningSelfUser,
    TextContent.is_quoting_self AS isQuotingSelfUser,
    TextContent.text_body AS text,
    AssetContent.asset_mime_type AS assetMimeType,
    (Message.creation_date > Conversation.last_read_date) AS isUnread,
    IFNULL((Message.creation_date > IFNULL(Conversation.last_notified_date, 0)), FALSE) AS shouldNotify,
    Conversation.muted_status AS mutedStatus,
    Conversation.type AS conversationType,
    FederationContent.domain_list AS federationDomainList
FROM Message
LEFT JOIN SelfUser
LEFT JOIN User ON Message.sender_user_id = User.qualified_id
LEFT JOIN Conversation AS Conversation ON Message.conversation_id == Conversation.qualified_id
LEFT JOIN MessageMemberChangeContent AS MemberChangeContent ON Message.id = MemberChangeContent.message_id AND Message.conversation_id = MemberChangeContent.conversation_id
LEFT JOIN MessageMention AS Mention ON Message.id == Mention.message_id AND SelfUser.id == Mention.user_id
LEFT JOIN MessageConversationChangedContent AS ConversationNameChangedContent ON Message.id = ConversationNameChangedContent.message_id AND Message.conversation_id = ConversationNameChangedContent.conversation_id
LEFT JOIN MessageAssetContent AS AssetContent ON Message.id = AssetContent.message_id AND Message.conversation_id = AssetContent.conversation_id
LEFT JOIN MessageTextContent AS TextContent ON Message.id = TextContent.message_id AND Message.conversation_id = TextContent.conversation_id
LEFT JOIN MessageFederationContent AS FederationContent ON Message.id = FederationContent.message_id AND Message.conversation_id = FederationContent.conversation_id;
