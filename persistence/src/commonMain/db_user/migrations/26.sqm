import com.wire.kalium.persistence.dao.QualifiedIDEntity;

PRAGMA foreign_keys = 0;

DROP VIEW IF EXISTS MessagePreview;
DROP VIEW IF EXISTS MessageQuoteDetails;
DROP VIEW IF EXISTS MessageDetailsView;

CREATE TABLE Temp_MessageTextContent (
      message_id TEXT NOT NULL,
      conversation_id TEXT AS QualifiedIDEntity NOT NULL,

      text_body TEXT,
      quoted_message_id TEXT,
      is_quote_verified INTEGER AS Boolean,
      is_quoting_self INTEGER AS Boolean NOT NULL,

      FOREIGN KEY (message_id, conversation_id) REFERENCES Message(id, conversation_id) ON DELETE CASCADE ON UPDATE CASCADE,
      PRIMARY KEY (message_id, conversation_id)
);

INSERT INTO Temp_MessageTextContent(message_id, conversation_id, text_body, quoted_message_id, is_quote_verified, is_quoting_self)
SELECT message_id, conversation_id, text_body, quoted_message_id, is_quote_verified, (
    CASE WHEN
        quoted_message_id IS NULL
            THEN 0
            ELSE (
                IFNULL(
                    (SELECT (Message.sender_user_id == SelfUser.id)
                        FROM Message
                        LEFT JOIN SelfUser
                     WHERE
                        Message.id = :quoted_message_id AND
                        conversation_id = :conversation_id),
                0 )
                )END
) FROM MessageTextContent;

DROP INDEX message_text_content_quoted_id_index;
DROP TABLE MessageTextContent;

ALTER TABLE Temp_MessageTextContent RENAME TO MessageTextContent;
CREATE INDEX message_text_content_quoted_id_index ON MessageTextContent(quoted_message_id) WHERE quoted_message_id IS NOT NULL;
CREATE INDEX message_conversation_index ON Message(conversation_id); -- this index hahe been added to the schema

CREATE VIEW IF NOT EXISTS MessagePreview
AS SELECT
    Message.id AS id,
    Message.conversation_id AS conversationId,
    Message.content_type AS contentType,
    Message.creation_date AS date,
    Message.visibility AS visibility,
    User.name AS senderName,
    User.connection_status AS senderConnectionStatus,
    User.deleted AS senderIsDeleted,
    SelfUser.id AS selfUserId,
    (Message.sender_user_id == SelfUser.id) AS isSelfMessage,
    MemberChangeContent.member_change_list AS memberChangeList,
    MemberChangeContent.member_change_type AS memberChangeType,
    ConversationNameChangedContent.conversation_name AS updateConversationName,
    Conversation.name AS conversationName,
    (Mention.user_id IS NOT NULL) AS isMentioningSelfUser,
    TextContent.is_quoting_self AS isQuotingSelfUser,
    TextContent.text_body AS text,
    AssetContent.asset_mime_type AS assetMimeType,
    (Message.creation_date > Conversation.last_read_date) AS isUnread,
    IFNULL((Message.creation_date > IFNULL(Conversation.last_notified_date, 0)), FALSE) AS shouldNotify,
    Conversation.muted_status AS mutedStatus,
    Conversation.type AS conversationType
FROM Message
LEFT JOIN SelfUser
LEFT JOIN User ON Message.sender_user_id = User.qualified_id
LEFT JOIN Conversation AS Conversation ON Message.conversation_id == Conversation.qualified_id
LEFT JOIN MessageMemberChangeContent AS MemberChangeContent ON Message.id = MemberChangeContent.message_id AND Message.conversation_id = MemberChangeContent.conversation_id
LEFT JOIN MessageMention AS Mention ON Message.id == Mention.message_id AND SelfUser.id == Mention.user_id
LEFT JOIN MessageConversationChangedContent AS ConversationNameChangedContent ON Message.id = ConversationNameChangedContent.message_id AND Message.conversation_id = ConversationNameChangedContent.conversation_id
LEFT JOIN MessageAssetContent AS AssetContent ON Message.id = AssetContent.message_id AND Message.conversation_id = AssetContent.conversation_id
LEFT JOIN MessageTextContent AS TextContent ON Message.id = TextContent.message_id AND Message.conversation_id = TextContent.conversation_id;


CREATE VIEW IF NOT EXISTS MessageQuoteDetails
AS SELECT
    MessageTextContent.message_id AS messageId,
    MessageTextContent.conversation_id AS conversationId,
    MessageTextContent.quoted_message_id AS quotedMessageId,
    MessageTextContent.is_quote_verified AS isQuoteVerified,
    QuotedSender.qualified_id AS quotedSenderId,
    (qualified_id == SelfUser.id) AS isQuotingSelfUser,
    QuotedSender.name AS quotedSenderName,
    QuotedMessage.creation_date quotedMessageCreationInstant,
    QuotedMessage.last_edit_date AS quotedMessageEditInstant,
    QuotedMessage.visibility AS quotedMessageVisibility,
    QuotedMessage.content_type AS quotedMessageContentType,
    QuotedTextContent.text_body AS quotedTextBody,
    QuotedAssetContent.asset_mime_type AS quotedAssetMimeType,
    QuotedAssetContent.asset_name AS quotedAssetName
FROM MessageTextContent
LEFT JOIN Message AS QuotedMessage ON QuotedMessage.id = MessageTextContent.quoted_message_id AND QuotedMessage.conversation_id = MessageTextContent.conversation_id
INNER JOIN User AS QuotedSender ON QuotedMessage.sender_user_id = QuotedSender.qualified_id
INNER JOIN SelfUser AS SelfUser
LEFT JOIN MessageTextContent AS QuotedTextContent ON QuotedTextContent.message_id = QuotedMessage.id AND QuotedMessage.conversation_id = MessageTextContent.conversation_id
LEFT JOIN MessageAssetContent AS QuotedAssetContent ON QuotedAssetContent.message_id = QuotedMessage.id AND QuotedMessage.conversation_id = MessageTextContent.conversation_id;

CREATE VIEW IF NOT EXISTS MessageDetailsView
AS SELECT
Message.id AS id,
Message.conversation_id AS conversationId,
Message.content_type AS contentType,
Message.creation_date AS date,
Message.sender_user_id AS senderUserId,
Message.sender_client_id AS senderClientId,
Message.status AS status,
Message.last_edit_date AS lastEditTimestamp,
Message.visibility AS visibility,
Message.expects_read_confirmation AS expectsReadConfirmation,
User.name AS senderName,
User.handle AS senderHandle,
User.email AS senderEmail,
User.phone AS senderPhone,
User.accent_id AS senderAccentId,
User.team AS senderTeamId,
User.connection_status AS senderConnectionStatus,
User.preview_asset_id AS senderPreviewAssetId,
User.complete_asset_id AS senderCompleteAssetId,
User.user_availability_status AS senderAvailabilityStatus,
User.user_type AS senderUserType,
User.bot_service AS senderBotService,
User.deleted AS senderIsDeleted,
(Message.sender_user_id == SelfUser.id) AS isSelfMessage,
TextContent.text_body AS text,
AssetContent.asset_size AS assetSize,
AssetContent.asset_name AS assetName,
AssetContent.asset_mime_type AS assetMimeType,
AssetContent.asset_upload_status AS assetUploadStatus,
AssetContent.asset_download_status AS assetDownloadStatus,
AssetContent.asset_otr_key AS assetOtrKey,
AssetContent.asset_sha256 AS assetSha256,
AssetContent.asset_id AS assetId,
AssetContent.asset_token AS assetToken,
AssetContent.asset_domain AS assetDomain,
AssetContent.asset_encryption_algorithm AS assetEncryptionAlgorithm,
AssetContent.asset_width AS assetWidth,
AssetContent.asset_height AS assetHeight,
AssetContent.asset_duration_ms AS assetDuration,
AssetContent.asset_normalized_loudness AS assetNormalizedLoudness,
MissedCallContent.caller_id AS callerId,
MemberChangeContent.member_change_list AS memberChangeList,
MemberChangeContent.member_change_type AS memberChangeType,
UnknownContent.unknown_type_name AS unknownContentTypeName,
UnknownContent.unknown_encoded_data AS unknownContentData,
RestrictedAssetContent.asset_mime_type AS restrictedAssetMimeType,
RestrictedAssetContent.asset_size AS restrictedAssetSize,
RestrictedAssetContent.asset_name AS restrictedAssetName,
FailedToDecryptContent.unknown_encoded_data AS failedToDecryptData,
FailedToDecryptContent.is_decryption_resolved AS isDecryptionResolved,
ConversationNameChangedContent.conversation_name AS conversationName,
'{' || IFNULL(
    (SELECT GROUP_CONCAT('"' || emoji || '":' || count)
    FROM (
        SELECT COUNT(*) count, Reaction.emoji emoji
        FROM Reaction
        WHERE Reaction.message_id = Message.id
        AND Reaction.conversation_id = Message.conversation_id
        GROUP BY Reaction.emoji
    )),
    '')
|| '}' AS allReactionsJson,
IFNULL(
    (SELECT '[' || GROUP_CONCAT('"' || Reaction.emoji || '"') || ']'
    FROM Reaction
    WHERE Reaction.message_id = Message.id
        AND Reaction.conversation_id = Message.conversation_id
        AND Reaction.sender_id = SelfUser.id
    ),
    '[]'
) AS selfReactionsJson,
IFNULL(
    (SELECT '[' || GROUP_CONCAT(
        '{"start":' || start || ', "length":' || length ||
        ', "userId":{"value":"' || replace(substr(user_id, 0, instr(user_id, '@')), '@', '') || '"' ||
        ',"domain":"' || replace(substr(user_id, instr(user_id, '@')+1, length(user_id)), '@', '') || '"' ||
        '}' || '}') || ']'
    FROM MessageMention
    WHERE MessageMention.message_id = Message.id
        AND MessageMention.conversation_id = Message.conversation_id
    ),
    '[]'
) AS mentions,
QuotedMessage.quotedMessageId AS quotedMessageId,
QuotedMessage.quotedSenderId AS quotedSenderId,
QuotedMessage.isQuotingSelfUser AS isQuotingSelfUser,
QuotedMessage.isQuoteVerified AS isQuoteVerified,
QuotedMessage.quotedSenderName AS quotedSenderName,
QuotedMessage.quotedMessageCreationInstant AS quotedMessageDateTime,
QuotedMessage.quotedMessageEditInstant AS quotedMessageEditTimestamp,
QuotedMessage.quotedMessageVisibility AS quotedMessageVisibility,
QuotedMessage.quotedMessageContentType AS quotedMessageContentType,
QuotedMessage.quotedTextBody AS quotedTextBody,
QuotedMessage.quotedAssetMimeType AS quotedAssetMimeType,
QuotedMessage.quotedAssetName AS quotedAssetName
FROM Message
LEFT JOIN User ON Message.sender_user_id = User.qualified_id
LEFT JOIN MessageTextContent AS TextContent ON Message.id = TextContent.message_id AND Message.conversation_id = TextContent.conversation_id
LEFT JOIN MessageAssetContent AS AssetContent ON Message.id = AssetContent.message_id AND Message.conversation_id = AssetContent.conversation_id
LEFT JOIN MessageMissedCallContent AS MissedCallContent ON Message.id = MissedCallContent.message_id AND Message.conversation_id = MissedCallContent.conversation_id
LEFT JOIN MessageMemberChangeContent AS MemberChangeContent ON Message.id = MemberChangeContent.message_id AND Message.conversation_id = MemberChangeContent.conversation_id
LEFT JOIN MessageUnknownContent AS UnknownContent ON Message.id = UnknownContent.message_id AND Message.conversation_id = UnknownContent.conversation_id
LEFT JOIN MessageRestrictedAssetContent AS RestrictedAssetContent ON Message.id = RestrictedAssetContent.message_id AND RestrictedAssetContent.conversation_id = RestrictedAssetContent.conversation_id
LEFT JOIN MessageFailedToDecryptContent AS FailedToDecryptContent ON Message.id = FailedToDecryptContent.message_id AND Message.conversation_id = FailedToDecryptContent.conversation_id
LEFT JOIN MessageConversationChangedContent AS ConversationNameChangedContent ON Message.id = ConversationNameChangedContent.message_id AND Message.conversation_id = ConversationNameChangedContent.conversation_id
LEFT JOIN MessageQuoteDetails AS QuotedMessage ON Message.id = QuotedMessage.messageId AND Message.conversation_id = QuotedMessage.conversationId
LEFT JOIN SelfUser;

PRAGMA foreign_keys = 1;
