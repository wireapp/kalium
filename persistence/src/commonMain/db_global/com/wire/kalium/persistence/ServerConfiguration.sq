import kotlin.Boolean;
import kotlin.Int;

CREATE TABLE ServerConfiguration (
    id TEXT PRIMARY KEY NOT NULL,
    title TEXT NOT NULL,
    apiBaseUrl TEXT NOT NULL,
    accountBaseUrl TEXT NOT NULL,
    webSocketBaseUrl TEXT NOT NULL,
    blackListUrl TEXT NOT NULL,
    teamsUrl TEXT NOT NULL,
    websiteUrl TEXT NOT NULL,
    isOnPremises INTEGER AS Boolean NOT NULL,
    domain TEXT,
    commonApiVersion INTEGER AS Int NOT NULL,
    federation INTEGER AS Boolean NOT NULL,
    apiProxyHost TEXT,
    apiProxyNeedsAuthentication INTEGER AS Boolean,
    apiProxyPort INTEGER AS Int,
    lastBlackListCheck TEXT,
    CONSTRAINT server_config_unique UNIQUE (title, apiBaseUrl, webSocketBaseUrl, domain, apiProxyHost, apiProxyPort)
);

deleteById:
DELETE FROM ServerConfiguration WHERE id = ?;

insert:
INSERT OR FAIL INTO ServerConfiguration(id, apiBaseUrl, accountBaseUrl, webSocketBaseUrl, blackListUrl, teamsUrl, websiteUrl, title, isOnPremises, federation, domain, commonApiVersion, apiProxyHost, apiProxyNeedsAuthentication, apiProxyPort)
VALUES( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?);

updateApiVersion:
UPDATE ServerConfiguration SET commonApiVersion = ? WHERE id = ?;

/** this function will be used when a config get updated from v0 where domain can be null */
updateApiVersionAndDomain:
UPDATE ServerConfiguration SET commonApiVersion = ?, domain = ? WHERE id = ?;

updateLastBlackListCheckByIds:
UPDATE ServerConfiguration SET lastBlackListCheck = ? WHERE id IN ?;

setFederationToTrue:
UPDATE ServerConfiguration SET federation = 1 WHERE id = ?;

storedConfig:
SELECT * FROM ServerConfiguration;

getById:
SELECT * FROM ServerConfiguration WHERE id = ?;

getByLinks:
SELECT * FROM ServerConfiguration WHERE title = ? AND apiBaseUrl = ? AND webSocketBaseUrl = ? AND apiProxyHost = :api_proxy_host AND apiProxyPort = :api_proxy_port;

getByUser:
SELECT * FROM ServerConfiguration WHERE id = (SELECT server_config_id FROM Accounts WHERE id = :userId);

getServerConfigsWithAccIdWithLastCheckBeforeDate:
SELECT sc.*, acc.id
    FROM  Accounts AS acc LEFT JOIN ServerConfiguration AS sc ON acc.server_config_id == sc.id
    WHERE acc.logout_reason IS NULL AND (sc.lastBlackListCheck IS NULL OR DateTime(sc.lastBlackListCheck) < DateTime(?))
    GROUP BY sc.id;
