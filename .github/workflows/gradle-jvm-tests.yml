name: "JVM & JS Tests"

on:
  merge_group:
  pull_request:
    types: [ opened, synchronize ] # Don't rerun on `edited` to save time
  push:
    branches: # Runs on develop to have the coverage diff on every PR
      - 'develop'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.merge_group.head_sha }}
  cancel-in-progress: true

env:
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
#  detekt:
#    uses: ./.github/workflows/codestyle.yml

  gradle-run-tests:
#    needs: [ detekt ]
    runs-on: ubuntu-latest
    # TODO: When migrating away from Cryptobox, use a regular Ubuntu machine with JDK 17 and caching
    container: kubazwire/cryptobox:1.0.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install make
        run: apt-get update && apt-get install -y make

      - name: Verify Java version
        run: java -version

      - name: Install SQLite 3.37.2 locally
        run: |
          wget https://www.sqlite.org/2022/sqlite-autoconf-3370200.tar.gz
          tar xzf sqlite-autoconf-3370200.tar.gz
          cd sqlite-autoconf-3370200
          ./configure --prefix=$HOME/sqlite-3.37.2
          make -j$(nproc)
          make install

      - name: Add local SQLite to PATH
        run: echo "$HOME/sqlite-3.37.2/bin" >> $GITHUB_PATH

      - name: Export sqlite env
        run: |
          echo "LD_LIBRARY_PATH=$HOME/sqlite-3.37.2/lib" >> $GITHUB_ENV

      - name: Verify SQLite version
        run: sqlite3 --version

      - name: Setup Java and Gradle
        uses: ./.github/actions/setup-java-gradle

      - name: Verify Java version after setup
        run: java -version

      - name: Build the CLI App
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew :cli:compileKotlinJvm -Djava.library.path=$LD_LIBRARY_PATH

      - name: Build the samples
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew :samples:compileKotlinJvm

      - name: Build the testservice
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew :testservice:compileKotlin -Djava.library.path=$LD_LIBRARY_PATH
          ./gradlew :testservice:test

      - name: Verify DB Migrations
        run: |
          make db/verify-all-migrations

      - name: Test with Gradle
        run: |
          export GRADLE_OPTS="-Dorg.gradle.logging.level=debug"
          ./gradlew jvmTest koverXmlReport -Djava.library.path=$LD_LIBRARY_PATH
          ./gradlew jsTest

      - name: Archive Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: ./**/build/reports/tests/**

      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./**/build/test-results/**/*.xml

      - name: Install Pip for test result publishing
        run: |
          apt-get update
          apt-get install -y -qq --no-install-recommends python3-pip python3-venv

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/build/test-results/**/*.xml

      - name: Install Git
        run: apt-get update && apt-get install -y -qq git

      - name: Upload test report to codecov
        uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: "build/reports/kover/report.xml"

      - name: Archive Kover report
        uses: actions/upload-artifact@v4
        with:
          name: kover-report
          path: build/reports/kover/report.xml

      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  upload-test-results-datadadog:
    runs-on: ubuntu-latest
    needs: gradle-run-tests
    if: always()

    steps:
      - name: Download tests results
        uses: actions/download-artifact@v4.1.9
        continue-on-error: true
      - name: Display structure of downloaded files
        run: ls -R
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install datadog-ci
        run: npm install -g @datadog/datadog-ci
      - name: "Upload results"
        env:
          DATADOG_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_ENV: ci
          DATADOG_SITE: datadoghq.eu
        run: |
          find . -name "*.xml" -type f | sed 's/ /\\ /g' | tr '\n' ' ' | xargs -L 1 datadog-ci junit upload --service kalium-jvm .
