name: "Android Instrumented Tests"

on:
  merge_group:
  pull_request:
    types: [ opened, synchronize ] # Don't rerun on `edited` to save time

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.merge_group.head_sha }}
  cancel-in-progress: true

jobs:
  detekt:
    uses: ./.github/workflows/codestyle.yml
  gradle-run-tests:
    needs: [ detekt ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [ 31 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java and Gradle
        uses: ./.github/actions/setup-java-gradle

      # - name: AVD cache
      #      - name: AVD cache
      #        uses: actions/cache@v4
      #        id: avd-cache
      #        with:
      #          path: |
      #            ~/.android/avd/*
      #            ~/.android/adb*
      #          key: avd-${{ matrix.api-level }}
      #
      #      - name: Create AVD and generate snapshot for caching
      #        if: steps.avd-cache.outputs.cache-hit != 'true'
      #        uses: reactivecircus/android-emulator-runner@v2.31.0
      #        env:
      #          GITHUB_USER: ${{ github.actor }}
      #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #        with:
      #          api-level: ${{ matrix.api-level }}
      #          force-avd-creation: false
      #          target: aosp_atd
      #          arch: x86_64
      #          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
      #          cores: 4
      #          ram-size: 4096M
      #          heap-size: 2048M
      #          disable-animations: false
      #          script: echo "Generated AVD snapshot for caching."

      - name: Build the samples
        run: |
          ./gradlew :samples:compileDebugSources

        # API 30+ emulators only have x86_64 system images.
      - name: Get AVD info
        uses: ./.github/actions/get-avd-info
        id: avd-info
        with:
          api-level: ${{ matrix.api-level }}

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Android Instrumentation Tests
        uses: reactivecircus/android-emulator-runner@v2
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ steps.avd-info.outputs.arch }}
          target: ${{ steps.avd-info.outputs.target }}
          cores: 4
          ram-size: 4096M
          heap-size: 2048M
          disable-animations: true
          script: ./gradlew connectedAndroidOnlyAffectedTest

      - name: Archive Test Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: ./**/build/reports/tests/**

      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            ./**/build/test-results/**/*.xml
            ./**/build/outputs/androidTest-results/**/*.xml

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2.17.1
        if: always()
        with:
          files: |
            **/build/test-results/**/*.xml
            **/build/outputs/androidTest-results/**/*.xml

      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  upload-test-results-datadadog:
    runs-on: ubuntu-latest
    needs: gradle-run-tests
    if: always()

    steps:
      - name: Download tests results
        uses: actions/download-artifact@v4.1.7
        continue-on-error: true
        with:
          name: test-results
          uses: actions/setup-node@v3
          with:
          node-version: 18
      - name: Install datadog-ci
        run: |
          npm install -g @datadog/datadog-ci
      - name: "Upload results"
        env:
          DATADOG_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_ENV: ci
          DATADOG_SITE: datadoghq.eu
        run: |
          find . -name "*.xml" -type f | sed 's/ /\\ /g' | tr '\n' ' ' | xargs -L 1 datadog-ci junit upload --service kalium-android .
